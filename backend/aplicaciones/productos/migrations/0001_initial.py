# Generated by Django 4.2.23 on 2025-06-22 22:30

from decimal import Decimal
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("clientes", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Categoria",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "fecha_creacion",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Fecha y hora de creación del registro",
                        verbose_name="Fecha de Creación",
                    ),
                ),
                (
                    "fecha_actualizacion",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Fecha y hora de última actualización",
                        verbose_name="Fecha de Actualización",
                    ),
                ),
                (
                    "activo",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Indica si el registro está activo",
                        verbose_name="Activo",
                    ),
                ),
                (
                    "codigo",
                    models.CharField(
                        db_index=True,
                        help_text="Código único de la categoría",
                        max_length=20,
                        unique=True,
                        verbose_name="Código",
                    ),
                ),
                (
                    "nombre",
                    models.CharField(
                        help_text="Nombre de la categoría",
                        max_length=100,
                        verbose_name="Nombre",
                    ),
                ),
                (
                    "descripcion",
                    models.TextField(
                        blank=True,
                        help_text="Descripción detallada",
                        null=True,
                        verbose_name="Descripción",
                    ),
                ),
                (
                    "orden",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Orden de visualización",
                        verbose_name="Orden",
                    ),
                ),
                (
                    "margen_utilidad_defecto",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        help_text="Margen de utilidad por defecto",
                        max_digits=5,
                        verbose_name="Margen Utilidad (%)",
                    ),
                ),
                (
                    "cuenta_contable_ventas",
                    models.CharField(
                        blank=True,
                        help_text="Cuenta contable para ventas",
                        max_length=10,
                        null=True,
                        verbose_name="Cuenta Contable Ventas",
                    ),
                ),
                (
                    "cuenta_contable_inventario",
                    models.CharField(
                        blank=True,
                        help_text="Cuenta contable para inventario",
                        max_length=10,
                        null=True,
                        verbose_name="Cuenta Contable Inventario",
                    ),
                ),
                (
                    "categoria_padre",
                    models.ForeignKey(
                        blank=True,
                        help_text="Categoría padre (opcional)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subcategorias",
                        to="productos.categoria",
                        verbose_name="Categoría Padre",
                    ),
                ),
            ],
            options={
                "verbose_name": "Categoría",
                "verbose_name_plural": "Categorías",
                "db_table": "productos_categoria",
                "ordering": ["orden", "nombre"],
            },
        ),
        migrations.CreateModel(
            name="TipoProducto",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "fecha_creacion",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Fecha y hora de creación del registro",
                        verbose_name="Fecha de Creación",
                    ),
                ),
                (
                    "fecha_actualizacion",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Fecha y hora de última actualización",
                        verbose_name="Fecha de Actualización",
                    ),
                ),
                (
                    "activo",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Indica si el registro está activo",
                        verbose_name="Activo",
                    ),
                ),
                (
                    "codigo",
                    models.CharField(
                        db_index=True,
                        help_text="Código único del tipo",
                        max_length=10,
                        unique=True,
                        verbose_name="Código",
                    ),
                ),
                (
                    "nombre",
                    models.CharField(
                        help_text="Nombre del tipo de producto",
                        max_length=100,
                        verbose_name="Nombre",
                    ),
                ),
                (
                    "tipo",
                    models.CharField(
                        choices=[
                            ("bien", "Bien"),
                            ("servicio", "Servicio"),
                            ("combo", "Combo/Paquete"),
                        ],
                        default="bien",
                        help_text="Tipo de producto",
                        max_length=20,
                        verbose_name="Tipo",
                    ),
                ),
                (
                    "unidad_medida_sunat",
                    models.CharField(
                        choices=[
                            ("ZZ", "Servicios"),
                            ("NIU", "Unidad (Bienes)"),
                            ("KGM", "Kilogramo"),
                            ("MTR", "Metro"),
                            ("LTR", "Litro"),
                            ("H87", "Pieza"),
                            ("BX", "Caja"),
                            ("PK", "Paquete"),
                            ("SET", "Conjunto"),
                        ],
                        default="NIU",
                        help_text="Código de unidad según SUNAT",
                        max_length=3,
                        verbose_name="Unidad SUNAT",
                    ),
                ),
                (
                    "controla_stock",
                    models.BooleanField(
                        default=True,
                        help_text="Si el tipo controla inventario",
                        verbose_name="Controla Stock",
                    ),
                ),
                (
                    "permite_decimales",
                    models.BooleanField(
                        default=False,
                        help_text="Si permite cantidades decimales",
                        verbose_name="Permite Decimales",
                    ),
                ),
                (
                    "requiere_lote",
                    models.BooleanField(
                        default=False,
                        help_text="Si requiere control de lotes",
                        verbose_name="Requiere Lote",
                    ),
                ),
                (
                    "requiere_vencimiento",
                    models.BooleanField(
                        default=False,
                        help_text="Si tiene fecha de vencimiento",
                        verbose_name="Requiere Vencimiento",
                    ),
                ),
            ],
            options={
                "verbose_name": "Tipo de Producto",
                "verbose_name_plural": "Tipos de Producto",
                "db_table": "productos_tipo_producto",
                "indexes": [
                    models.Index(fields=["codigo"], name="idx_tipo_prod_codigo"),
                    models.Index(fields=["tipo"], name="idx_tipo_prod_tipo"),
                    models.Index(fields=["activo"], name="idx_tipo_prod_activo"),
                ],
            },
        ),
        migrations.CreateModel(
            name="Producto",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "fecha_creacion",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Fecha y hora de creación del registro",
                        verbose_name="Fecha de Creación",
                    ),
                ),
                (
                    "fecha_actualizacion",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Fecha y hora de última actualización",
                        verbose_name="Fecha de Actualización",
                    ),
                ),
                (
                    "activo",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Indica si el registro está activo",
                        verbose_name="Activo",
                    ),
                ),
                (
                    "codigo",
                    models.CharField(
                        db_index=True,
                        help_text="Código único del producto",
                        max_length=50,
                        unique=True,
                        verbose_name="Código",
                    ),
                ),
                (
                    "nombre",
                    models.CharField(
                        db_index=True,
                        help_text="Nombre del producto",
                        max_length=200,
                        verbose_name="Nombre",
                    ),
                ),
                (
                    "descripcion",
                    models.TextField(
                        blank=True,
                        help_text="Descripción detallada",
                        null=True,
                        verbose_name="Descripción",
                    ),
                ),
                (
                    "codigo_barras",
                    models.CharField(
                        blank=True,
                        help_text="Código de barras EAN",
                        max_length=15,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Código de barras debe tener entre 8 y 13 dígitos",
                                regex="^[0-9]{8,13}$",
                            )
                        ],
                        verbose_name="Código de Barras",
                    ),
                ),
                (
                    "codigo_interno",
                    models.CharField(
                        blank=True,
                        help_text="Código interno alternativo",
                        max_length=50,
                        null=True,
                        verbose_name="Código Interno",
                    ),
                ),
                (
                    "codigo_proveedor",
                    models.CharField(
                        blank=True,
                        help_text="Código del proveedor",
                        max_length=50,
                        null=True,
                        verbose_name="Código Proveedor",
                    ),
                ),
                (
                    "codigo_producto_sunat",
                    models.CharField(
                        blank=True,
                        help_text="Código de producto según SUNAT",
                        max_length=10,
                        null=True,
                        verbose_name="Código SUNAT",
                    ),
                ),
                (
                    "tipo_afectacion_igv",
                    models.CharField(
                        choices=[
                            ("10", "Gravado - Operación Onerosa"),
                            ("11", "Gravado - Retiro por premio"),
                            ("12", "Gravado - Retiro por donación"),
                            ("13", "Gravado - Retiro"),
                            ("14", "Gravado - Retiro por publicidad"),
                            ("15", "Gravado - Bonificaciones"),
                            ("16", "Gravado - Retiro por entrega a trabajadores"),
                            ("20", "Exonerado - Operación Onerosa"),
                            ("30", "Inafecto - Operación Onerosa"),
                            ("40", "Exportación"),
                        ],
                        default="10",
                        help_text="Tipo de afectación IGV según SUNAT",
                        max_length=2,
                        verbose_name="Tipo Afectación IGV",
                    ),
                ),
                (
                    "precio_compra",
                    models.DecimalField(
                        decimal_places=4,
                        default=Decimal("0.0000"),
                        help_text="Precio de compra sin IGV",
                        max_digits=12,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="Precio de Compra",
                    ),
                ),
                (
                    "precio_venta",
                    models.DecimalField(
                        decimal_places=4,
                        default=Decimal("0.0000"),
                        help_text="Precio de venta sin IGV",
                        max_digits=12,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                        verbose_name="Precio de Venta",
                    ),
                ),
                (
                    "precio_venta_con_igv",
                    models.DecimalField(
                        decimal_places=4,
                        default=Decimal("0.0000"),
                        help_text="Precio de venta con IGV incluido",
                        max_digits=12,
                        verbose_name="Precio Venta c/IGV",
                    ),
                ),
                (
                    "margen_utilidad",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Margen de utilidad porcentual",
                        max_digits=5,
                        verbose_name="Margen Utilidad (%)",
                    ),
                ),
                (
                    "stock_actual",
                    models.DecimalField(
                        decimal_places=4,
                        default=Decimal("0.0000"),
                        help_text="Stock actual disponible",
                        max_digits=12,
                        verbose_name="Stock Actual",
                    ),
                ),
                (
                    "stock_minimo",
                    models.DecimalField(
                        decimal_places=4,
                        default=Decimal("0.0000"),
                        help_text="Stock mínimo requerido",
                        max_digits=12,
                        verbose_name="Stock Mínimo",
                    ),
                ),
                (
                    "stock_maximo",
                    models.DecimalField(
                        decimal_places=4,
                        default=Decimal("0.0000"),
                        help_text="Stock máximo recomendado",
                        max_digits=12,
                        verbose_name="Stock Máximo",
                    ),
                ),
                (
                    "punto_reorden",
                    models.DecimalField(
                        decimal_places=4,
                        default=Decimal("0.0000"),
                        help_text="Punto de reorden automático",
                        max_digits=12,
                        verbose_name="Punto de Reorden",
                    ),
                ),
                (
                    "unidad_medida",
                    models.CharField(
                        default="UNIDAD",
                        help_text="Unidad de medida principal",
                        max_length=20,
                        verbose_name="Unidad de Medida",
                    ),
                ),
                (
                    "unidad_medida_sunat",
                    models.CharField(
                        default="NIU",
                        help_text="Código de unidad según SUNAT",
                        max_length=3,
                        verbose_name="Unidad SUNAT",
                    ),
                ),
                (
                    "peso",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        default=Decimal("0.0000"),
                        help_text="Peso en kilogramos",
                        max_digits=8,
                        null=True,
                        verbose_name="Peso (Kg)",
                    ),
                ),
                (
                    "volumen",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        default=Decimal("0.0000"),
                        help_text="Volumen en metros cúbicos",
                        max_digits=8,
                        null=True,
                        verbose_name="Volumen (m³)",
                    ),
                ),
                (
                    "permite_venta",
                    models.BooleanField(
                        default=True,
                        help_text="Si el producto puede venderse",
                        verbose_name="Permite Venta",
                    ),
                ),
                (
                    "permite_compra",
                    models.BooleanField(
                        default=True,
                        help_text="Si el producto puede comprarse",
                        verbose_name="Permite Compra",
                    ),
                ),
                (
                    "controla_stock",
                    models.BooleanField(
                        default=True,
                        help_text="Si controla inventario",
                        verbose_name="Controla Stock",
                    ),
                ),
                (
                    "permite_descuento",
                    models.BooleanField(
                        default=True,
                        help_text="Si permite descuentos en venta",
                        verbose_name="Permite Descuento",
                    ),
                ),
                (
                    "descuento_maximo",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Descuento máximo permitido",
                        max_digits=5,
                        verbose_name="Descuento Máximo (%)",
                    ),
                ),
                (
                    "marca",
                    models.CharField(
                        blank=True,
                        help_text="Marca del producto",
                        max_length=100,
                        null=True,
                        verbose_name="Marca",
                    ),
                ),
                (
                    "modelo",
                    models.CharField(
                        blank=True,
                        help_text="Modelo del producto",
                        max_length=100,
                        null=True,
                        verbose_name="Modelo",
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        blank=True,
                        help_text="Color del producto",
                        max_length=50,
                        null=True,
                        verbose_name="Color",
                    ),
                ),
                (
                    "talla",
                    models.CharField(
                        blank=True,
                        help_text="Talla del producto",
                        max_length=20,
                        null=True,
                        verbose_name="Talla",
                    ),
                ),
                (
                    "fecha_vencimiento",
                    models.DateField(
                        blank=True,
                        help_text="Fecha de vencimiento del producto",
                        null=True,
                        verbose_name="Fecha de Vencimiento",
                    ),
                ),
                (
                    "fecha_ultima_compra",
                    models.DateTimeField(
                        blank=True,
                        help_text="Fecha de última compra",
                        null=True,
                        verbose_name="Última Compra",
                    ),
                ),
                (
                    "fecha_ultima_venta",
                    models.DateTimeField(
                        blank=True,
                        help_text="Fecha de última venta",
                        null=True,
                        verbose_name="Última Venta",
                    ),
                ),
                (
                    "cuenta_contable_ventas",
                    models.CharField(
                        blank=True,
                        help_text="Cuenta contable para ventas",
                        max_length=10,
                        null=True,
                        verbose_name="Cuenta Ventas",
                    ),
                ),
                (
                    "cuenta_contable_compras",
                    models.CharField(
                        blank=True,
                        help_text="Cuenta contable para compras",
                        max_length=10,
                        null=True,
                        verbose_name="Cuenta Compras",
                    ),
                ),
                (
                    "cuenta_contable_inventario",
                    models.CharField(
                        blank=True,
                        help_text="Cuenta contable para inventario",
                        max_length=10,
                        null=True,
                        verbose_name="Cuenta Inventario",
                    ),
                ),
                (
                    "total_vendido",
                    models.DecimalField(
                        decimal_places=4,
                        default=Decimal("0.0000"),
                        help_text="Cantidad total vendida",
                        max_digits=12,
                        verbose_name="Total Vendido",
                    ),
                ),
                (
                    "total_comprado",
                    models.DecimalField(
                        decimal_places=4,
                        default=Decimal("0.0000"),
                        help_text="Cantidad total comprada",
                        max_digits=12,
                        verbose_name="Total Comprado",
                    ),
                ),
                (
                    "monto_total_ventas",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Monto total de ventas",
                        max_digits=12,
                        verbose_name="Monto Total Ventas",
                    ),
                ),
                (
                    "numero_ventas",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Cantidad de transacciones de venta",
                        verbose_name="Número de Ventas",
                    ),
                ),
                (
                    "categoria",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="productos",
                        to="productos.categoria",
                        verbose_name="Categoría",
                    ),
                ),
                (
                    "tipo_producto",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="productos",
                        to="productos.tipoproducto",
                        verbose_name="Tipo de Producto",
                    ),
                ),
            ],
            options={
                "verbose_name": "Producto",
                "verbose_name_plural": "Productos",
                "db_table": "productos_producto",
                "ordering": ["codigo", "nombre"],
            },
        ),
        migrations.CreateModel(
            name="ProductoProveedor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "fecha_creacion",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Fecha y hora de creación del registro",
                        verbose_name="Fecha de Creación",
                    ),
                ),
                (
                    "fecha_actualizacion",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Fecha y hora de última actualización",
                        verbose_name="Fecha de Actualización",
                    ),
                ),
                (
                    "activo",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Indica si el registro está activo",
                        verbose_name="Activo",
                    ),
                ),
                (
                    "codigo_proveedor",
                    models.CharField(
                        help_text="Código del producto según el proveedor",
                        max_length=50,
                        verbose_name="Código Proveedor",
                    ),
                ),
                (
                    "precio_compra",
                    models.DecimalField(
                        decimal_places=4,
                        help_text="Precio de compra al proveedor",
                        max_digits=12,
                        verbose_name="Precio de Compra",
                    ),
                ),
                (
                    "tiempo_entrega_dias",
                    models.PositiveIntegerField(
                        default=7,
                        help_text="Tiempo de entrega en días",
                        verbose_name="Tiempo Entrega (días)",
                    ),
                ),
                (
                    "cantidad_minima",
                    models.DecimalField(
                        decimal_places=4,
                        default=Decimal("1.0000"),
                        help_text="Cantidad mínima de compra",
                        max_digits=12,
                        verbose_name="Cantidad Mínima",
                    ),
                ),
                (
                    "es_principal",
                    models.BooleanField(
                        default=False,
                        help_text="Si es el proveedor principal",
                        verbose_name="Es Proveedor Principal",
                    ),
                ),
                (
                    "fecha_ultimo_precio",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Fecha de última actualización de precio",
                        verbose_name="Fecha Último Precio",
                    ),
                ),
                (
                    "notas",
                    models.TextField(
                        blank=True,
                        help_text="Notas adicionales del proveedor",
                        null=True,
                        verbose_name="Notas",
                    ),
                ),
                (
                    "producto",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="proveedores",
                        to="productos.producto",
                        verbose_name="Producto",
                    ),
                ),
                (
                    "proveedor",
                    models.ForeignKey(
                        limit_choices_to={"tipo_cliente": "persona_juridica"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="productos_suministrados",
                        to="clientes.cliente",
                        verbose_name="Proveedor",
                    ),
                ),
            ],
            options={
                "verbose_name": "Producto-Proveedor",
                "verbose_name_plural": "Productos-Proveedores",
                "db_table": "productos_producto_proveedor",
                "indexes": [
                    models.Index(fields=["producto"], name="idx_prod_prov_producto"),
                    models.Index(fields=["proveedor"], name="idx_prod_prov_proveedor"),
                    models.Index(
                        fields=["es_principal"], name="idx_prod_prov_principal"
                    ),
                    models.Index(fields=["activo"], name="idx_prod_prov_activo"),
                ],
                "unique_together": {("producto", "proveedor")},
            },
        ),
        migrations.AddIndex(
            model_name="producto",
            index=models.Index(fields=["codigo"], name="idx_producto_codigo"),
        ),
        migrations.AddIndex(
            model_name="producto",
            index=models.Index(fields=["nombre"], name="idx_producto_nombre"),
        ),
        migrations.AddIndex(
            model_name="producto",
            index=models.Index(fields=["codigo_barras"], name="idx_producto_barras"),
        ),
        migrations.AddIndex(
            model_name="producto",
            index=models.Index(fields=["categoria"], name="idx_producto_categoria_rel"),
        ),
        migrations.AddIndex(
            model_name="producto",
            index=models.Index(fields=["tipo_producto"], name="idx_producto_tipo"),
        ),
        migrations.AddIndex(
            model_name="producto",
            index=models.Index(fields=["activo"], name="idx_producto_activo"),
        ),
        migrations.AddIndex(
            model_name="producto",
            index=models.Index(fields=["permite_venta"], name="idx_producto_venta"),
        ),
        migrations.AddIndex(
            model_name="producto",
            index=models.Index(fields=["controla_stock"], name="idx_producto_stock"),
        ),
        migrations.AddIndex(
            model_name="producto",
            index=models.Index(
                fields=["stock_actual"], name="idx_producto_stock_actual"
            ),
        ),
        migrations.AddIndex(
            model_name="producto",
            index=models.Index(fields=["stock_minimo"], name="idx_producto_stock_min"),
        ),
        migrations.AddIndex(
            model_name="producto",
            index=models.Index(fields=["fecha_vencimiento"], name="idx_producto_venc"),
        ),
        migrations.AddIndex(
            model_name="categoria",
            index=models.Index(fields=["codigo"], name="idx_categoria_codigo"),
        ),
        migrations.AddIndex(
            model_name="categoria",
            index=models.Index(fields=["categoria_padre"], name="idx_categoria_padre"),
        ),
        migrations.AddIndex(
            model_name="categoria",
            index=models.Index(fields=["orden"], name="idx_categoria_orden"),
        ),
        migrations.AddIndex(
            model_name="categoria",
            index=models.Index(fields=["activo"], name="idx_categoria_activo"),
        ),
    ]
