# Generated by Django 4.2.23 on 2025-06-22 22:30

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("clientes", "0001_initial"),
        ("core", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("productos", "0001_initial"),
        ("facturacion", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Almacen",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "fecha_creacion",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Fecha y hora de creación del registro",
                        verbose_name="Fecha de Creación",
                    ),
                ),
                (
                    "fecha_actualizacion",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Fecha y hora de última actualización",
                        verbose_name="Fecha de Actualización",
                    ),
                ),
                (
                    "activo",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Indica si el registro está activo",
                        verbose_name="Activo",
                    ),
                ),
                (
                    "codigo",
                    models.CharField(
                        db_index=True,
                        help_text="Código único del almacén",
                        max_length=20,
                        unique=True,
                        verbose_name="Código",
                    ),
                ),
                (
                    "nombre",
                    models.CharField(
                        help_text="Nombre del almacén",
                        max_length=100,
                        verbose_name="Nombre",
                    ),
                ),
                (
                    "descripcion",
                    models.TextField(
                        blank=True,
                        help_text="Descripción del almacén",
                        null=True,
                        verbose_name="Descripción",
                    ),
                ),
                (
                    "direccion",
                    models.TextField(
                        blank=True,
                        help_text="Dirección del almacén",
                        max_length=300,
                        null=True,
                        verbose_name="Dirección",
                    ),
                ),
                (
                    "capacidad_maxima",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Capacidad máxima del almacén",
                        max_digits=12,
                        null=True,
                        verbose_name="Capacidad Máxima",
                    ),
                ),
                (
                    "unidad_capacidad",
                    models.CharField(
                        default="m3",
                        help_text="Unidad de medida de la capacidad",
                        max_length=20,
                        verbose_name="Unidad Capacidad",
                    ),
                ),
                (
                    "es_principal",
                    models.BooleanField(
                        default=False,
                        help_text="Si es el almacén principal",
                        verbose_name="Es Principal",
                    ),
                ),
                (
                    "permite_ventas",
                    models.BooleanField(
                        default=True,
                        help_text="Si permite salidas por ventas",
                        verbose_name="Permite Ventas",
                    ),
                ),
                (
                    "permite_compras",
                    models.BooleanField(
                        default=True,
                        help_text="Si permite entradas por compras",
                        verbose_name="Permite Compras",
                    ),
                ),
                (
                    "controla_ubicaciones",
                    models.BooleanField(
                        default=False,
                        help_text="Si controla ubicaciones específicas",
                        verbose_name="Controla Ubicaciones",
                    ),
                ),
                (
                    "temperatura_min",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Temperatura mínima en °C",
                        max_digits=5,
                        null=True,
                        verbose_name="Temperatura Mínima",
                    ),
                ),
                (
                    "temperatura_max",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Temperatura máxima en °C",
                        max_digits=5,
                        null=True,
                        verbose_name="Temperatura Máxima",
                    ),
                ),
                (
                    "humedad_min",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Humedad mínima en %",
                        max_digits=5,
                        null=True,
                        verbose_name="Humedad Mínima",
                    ),
                ),
                (
                    "humedad_max",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Humedad máxima en %",
                        max_digits=5,
                        null=True,
                        verbose_name="Humedad Máxima",
                    ),
                ),
                (
                    "responsable",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="almacenes_responsable",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Responsable",
                    ),
                ),
                (
                    "sucursal",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="almacenes",
                        to="core.sucursal",
                        verbose_name="Sucursal",
                    ),
                ),
            ],
            options={
                "verbose_name": "Almacén",
                "verbose_name_plural": "Almacenes",
                "db_table": "inventario_almacen",
                "ordering": ["sucursal", "codigo"],
            },
        ),
        migrations.CreateModel(
            name="TipoMovimiento",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "fecha_creacion",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Fecha y hora de creación del registro",
                        verbose_name="Fecha de Creación",
                    ),
                ),
                (
                    "fecha_actualizacion",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Fecha y hora de última actualización",
                        verbose_name="Fecha de Actualización",
                    ),
                ),
                (
                    "activo",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Indica si el registro está activo",
                        verbose_name="Activo",
                    ),
                ),
                (
                    "codigo",
                    models.CharField(
                        db_index=True,
                        help_text="Código único del tipo de movimiento",
                        max_length=20,
                        unique=True,
                        verbose_name="Código",
                    ),
                ),
                (
                    "nombre",
                    models.CharField(
                        help_text="Nombre del tipo de movimiento",
                        max_length=100,
                        verbose_name="Nombre",
                    ),
                ),
                (
                    "tipo",
                    models.CharField(
                        choices=[
                            ("entrada", "Entrada"),
                            ("salida", "Salida"),
                            ("ajuste", "Ajuste"),
                            ("transferencia", "Transferencia"),
                        ],
                        help_text="Tipo de movimiento (entrada/salida)",
                        max_length=20,
                        verbose_name="Tipo",
                    ),
                ),
                (
                    "categoria",
                    models.CharField(
                        choices=[
                            ("compra", "Compra"),
                            ("venta", "Venta"),
                            ("devolucion_compra", "Devolución de Compra"),
                            ("devolucion_venta", "Devolución de Venta"),
                            ("ajuste_positivo", "Ajuste Positivo"),
                            ("ajuste_negativo", "Ajuste Negativo"),
                            ("transferencia_entrada", "Transferencia Entrada"),
                            ("transferencia_salida", "Transferencia Salida"),
                            ("inventario_inicial", "Inventario Inicial"),
                            ("merma", "Merma"),
                            ("robo", "Robo/Pérdida"),
                            ("vencimiento", "Vencimiento"),
                            ("produccion", "Producción"),
                            ("consumo_interno", "Consumo Interno"),
                        ],
                        help_text="Categoría específica del movimiento",
                        max_length=30,
                        verbose_name="Categoría",
                    ),
                ),
                (
                    "afecta_costo",
                    models.BooleanField(
                        default=True,
                        help_text="Si el movimiento afecta el costo promedio",
                        verbose_name="Afecta Costo",
                    ),
                ),
                (
                    "requiere_autorizacion",
                    models.BooleanField(
                        default=False,
                        help_text="Si requiere autorización para ejecutar",
                        verbose_name="Requiere Autorización",
                    ),
                ),
                (
                    "genera_documento",
                    models.BooleanField(
                        default=False,
                        help_text="Si genera documento contable automático",
                        verbose_name="Genera Documento",
                    ),
                ),
                (
                    "cuenta_contable_debe",
                    models.CharField(
                        blank=True,
                        help_text="Cuenta contable para el debe",
                        max_length=10,
                        null=True,
                        verbose_name="Cuenta Debe",
                    ),
                ),
                (
                    "cuenta_contable_haber",
                    models.CharField(
                        blank=True,
                        help_text="Cuenta contable para el haber",
                        max_length=10,
                        null=True,
                        verbose_name="Cuenta Haber",
                    ),
                ),
                (
                    "orden",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Orden de visualización",
                        verbose_name="Orden",
                    ),
                ),
            ],
            options={
                "verbose_name": "Tipo de Movimiento",
                "verbose_name_plural": "Tipos de Movimientos",
                "db_table": "inventario_tipo_movimiento",
                "ordering": ["orden", "nombre"],
                "indexes": [
                    models.Index(fields=["codigo"], name="idx_tipo_mov_codigo"),
                    models.Index(fields=["tipo"], name="idx_tipo_mov_tipo"),
                    models.Index(fields=["categoria"], name="idx_tipo_mov_categoria"),
                    models.Index(fields=["orden"], name="idx_tipo_mov_orden"),
                    models.Index(fields=["activo"], name="idx_tipo_mov_activo"),
                ],
            },
        ),
        migrations.CreateModel(
            name="MovimientoInventario",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "fecha_creacion",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Fecha y hora de creación del registro",
                        verbose_name="Fecha de Creación",
                    ),
                ),
                (
                    "fecha_actualizacion",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Fecha y hora de última actualización",
                        verbose_name="Fecha de Actualización",
                    ),
                ),
                (
                    "activo",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Indica si el registro está activo",
                        verbose_name="Activo",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Identificador único universal",
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "numero",
                    models.CharField(
                        db_index=True,
                        help_text="Número único del movimiento",
                        max_length=20,
                        unique=True,
                        verbose_name="Número",
                    ),
                ),
                (
                    "fecha_movimiento",
                    models.DateTimeField(
                        db_index=True,
                        default=django.utils.timezone.now,
                        help_text="Fecha y hora del movimiento",
                        verbose_name="Fecha de Movimiento",
                    ),
                ),
                (
                    "documento_origen",
                    models.CharField(
                        blank=True,
                        help_text="Documento que origina el movimiento",
                        max_length=50,
                        null=True,
                        verbose_name="Documento Origen",
                    ),
                ),
                (
                    "estado",
                    models.CharField(
                        choices=[
                            ("borrador", "Borrador"),
                            ("pendiente", "Pendiente"),
                            ("autorizado", "Autorizado"),
                            ("ejecutado", "Ejecutado"),
                            ("anulado", "Anulado"),
                        ],
                        db_index=True,
                        default="borrador",
                        help_text="Estado del movimiento",
                        max_length=20,
                        verbose_name="Estado",
                    ),
                ),
                (
                    "fecha_autorizacion",
                    models.DateTimeField(
                        blank=True,
                        help_text="Fecha de autorización",
                        null=True,
                        verbose_name="Fecha Autorización",
                    ),
                ),
                (
                    "observaciones",
                    models.TextField(
                        blank=True,
                        help_text="Observaciones del movimiento",
                        null=True,
                        verbose_name="Observaciones",
                    ),
                ),
                (
                    "motivo",
                    models.TextField(
                        blank=True,
                        help_text="Motivo del movimiento",
                        null=True,
                        verbose_name="Motivo",
                    ),
                ),
                (
                    "total_items",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Cantidad total de items",
                        verbose_name="Total Items",
                    ),
                ),
                (
                    "total_cantidad",
                    models.DecimalField(
                        decimal_places=4,
                        default=Decimal("0.0000"),
                        help_text="Cantidad total del movimiento",
                        max_digits=12,
                        verbose_name="Total Cantidad",
                    ),
                ),
                (
                    "total_valor",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Valor total del movimiento",
                        max_digits=12,
                        verbose_name="Total Valor",
                    ),
                ),
                (
                    "almacen",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="movimientos",
                        to="inventario.almacen",
                        verbose_name="Almacén",
                    ),
                ),
                (
                    "documento_electronico",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="movimientos_inventario",
                        to="facturacion.documentoelectronico",
                        verbose_name="Documento Electrónico",
                    ),
                ),
                (
                    "proveedor_cliente",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="movimientos_inventario",
                        to="clientes.cliente",
                        verbose_name="Proveedor/Cliente",
                    ),
                ),
                (
                    "tipo_movimiento",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="movimientos",
                        to="inventario.tipomovimiento",
                        verbose_name="Tipo de Movimiento",
                    ),
                ),
                (
                    "usuario_autorizacion",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="movimientos_autorizados",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Usuario Autorización",
                    ),
                ),
                (
                    "usuario_creacion",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="movimientos_creados",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Usuario Creación",
                    ),
                ),
            ],
            options={
                "verbose_name": "Movimiento de Inventario",
                "verbose_name_plural": "Movimientos de Inventario",
                "db_table": "inventario_movimiento_inventario",
                "ordering": ["-fecha_movimiento", "-numero"],
            },
        ),
        migrations.CreateModel(
            name="LoteProducto",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "fecha_creacion",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Fecha y hora de creación del registro",
                        verbose_name="Fecha de Creación",
                    ),
                ),
                (
                    "fecha_actualizacion",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Fecha y hora de última actualización",
                        verbose_name="Fecha de Actualización",
                    ),
                ),
                (
                    "activo",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Indica si el registro está activo",
                        verbose_name="Activo",
                    ),
                ),
                (
                    "numero_lote",
                    models.CharField(
                        db_index=True,
                        help_text="Número identificador del lote",
                        max_length=50,
                        verbose_name="Número de Lote",
                    ),
                ),
                (
                    "fecha_ingreso",
                    models.DateTimeField(
                        db_index=True,
                        default=django.utils.timezone.now,
                        help_text="Fecha de ingreso del lote",
                        verbose_name="Fecha de Ingreso",
                    ),
                ),
                (
                    "fecha_vencimiento",
                    models.DateField(
                        blank=True,
                        db_index=True,
                        help_text="Fecha de vencimiento del lote",
                        null=True,
                        verbose_name="Fecha de Vencimiento",
                    ),
                ),
                (
                    "cantidad_inicial",
                    models.DecimalField(
                        decimal_places=4,
                        help_text="Cantidad inicial del lote",
                        max_digits=12,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0001"))
                        ],
                        verbose_name="Cantidad Inicial",
                    ),
                ),
                (
                    "cantidad_actual",
                    models.DecimalField(
                        decimal_places=4,
                        default=Decimal("0.0000"),
                        help_text="Cantidad actual disponible",
                        max_digits=12,
                        verbose_name="Cantidad Actual",
                    ),
                ),
                (
                    "costo_unitario",
                    models.DecimalField(
                        decimal_places=4,
                        help_text="Costo unitario del lote",
                        max_digits=12,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0000"))
                        ],
                        verbose_name="Costo Unitario",
                    ),
                ),
                (
                    "valor_total",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Valor total del lote",
                        max_digits=12,
                        verbose_name="Valor Total",
                    ),
                ),
                (
                    "documento_origen",
                    models.CharField(
                        blank=True,
                        help_text="Documento que originó el lote",
                        max_length=50,
                        null=True,
                        verbose_name="Documento Origen",
                    ),
                ),
                (
                    "observaciones",
                    models.TextField(
                        blank=True,
                        help_text="Observaciones del lote",
                        null=True,
                        verbose_name="Observaciones",
                    ),
                ),
                (
                    "estado_calidad",
                    models.CharField(
                        choices=[
                            ("bueno", "Bueno"),
                            ("regular", "Regular"),
                            ("malo", "Malo"),
                            ("vencido", "Vencido"),
                            ("cuarentena", "En Cuarentena"),
                        ],
                        default="bueno",
                        help_text="Estado de calidad del lote",
                        max_length=20,
                        verbose_name="Estado de Calidad",
                    ),
                ),
                (
                    "temperatura_almacenamiento",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Temperatura de almacenamiento en °C",
                        max_digits=5,
                        null=True,
                        verbose_name="Temperatura Almacenamiento",
                    ),
                ),
                (
                    "humedad_almacenamiento",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Humedad de almacenamiento en %",
                        max_digits=5,
                        null=True,
                        verbose_name="Humedad Almacenamiento",
                    ),
                ),
                (
                    "almacen",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lotes",
                        to="inventario.almacen",
                        verbose_name="Almacén",
                    ),
                ),
                (
                    "producto",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lotes",
                        to="productos.producto",
                        verbose_name="Producto",
                    ),
                ),
                (
                    "proveedor",
                    models.ForeignKey(
                        blank=True,
                        limit_choices_to={"tipo_cliente": "persona_juridica"},
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="lotes_productos",
                        to="clientes.cliente",
                        verbose_name="Proveedor",
                    ),
                ),
            ],
            options={
                "verbose_name": "Lote de Producto",
                "verbose_name_plural": "Lotes de Productos",
                "db_table": "inventario_lote_producto",
                "ordering": ["fecha_ingreso", "numero_lote"],
            },
        ),
        migrations.CreateModel(
            name="DetalleMovimiento",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "fecha_creacion",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Fecha y hora de creación del registro",
                        verbose_name="Fecha de Creación",
                    ),
                ),
                (
                    "fecha_actualizacion",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Fecha y hora de última actualización",
                        verbose_name="Fecha de Actualización",
                    ),
                ),
                (
                    "activo",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Indica si el registro está activo",
                        verbose_name="Activo",
                    ),
                ),
                (
                    "numero_item",
                    models.PositiveIntegerField(
                        help_text="Número correlativo del item",
                        verbose_name="Número de Item",
                    ),
                ),
                (
                    "cantidad",
                    models.DecimalField(
                        decimal_places=4,
                        help_text="Cantidad del movimiento",
                        max_digits=12,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0001"))
                        ],
                        verbose_name="Cantidad",
                    ),
                ),
                (
                    "costo_unitario",
                    models.DecimalField(
                        decimal_places=4,
                        default=Decimal("0.0000"),
                        help_text="Costo unitario del producto",
                        max_digits=12,
                        verbose_name="Costo Unitario",
                    ),
                ),
                (
                    "valor_total",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Valor total del item",
                        max_digits=12,
                        verbose_name="Valor Total",
                    ),
                ),
                (
                    "numero_lote_entrada",
                    models.CharField(
                        blank=True,
                        help_text="Número de lote para nuevas entradas",
                        max_length=50,
                        null=True,
                        verbose_name="Número Lote Entrada",
                    ),
                ),
                (
                    "fecha_vencimiento_entrada",
                    models.DateField(
                        blank=True,
                        help_text="Fecha de vencimiento para nuevas entradas",
                        null=True,
                        verbose_name="Vencimiento Entrada",
                    ),
                ),
                (
                    "observaciones",
                    models.TextField(
                        blank=True,
                        help_text="Observaciones del item",
                        null=True,
                        verbose_name="Observaciones",
                    ),
                ),
                (
                    "ejecutado",
                    models.BooleanField(
                        default=False,
                        help_text="Si el detalle ha sido ejecutado",
                        verbose_name="Ejecutado",
                    ),
                ),
                (
                    "fecha_ejecucion",
                    models.DateTimeField(
                        blank=True,
                        help_text="Fecha de ejecución del detalle",
                        null=True,
                        verbose_name="Fecha Ejecución",
                    ),
                ),
                (
                    "lote",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="movimientos",
                        to="inventario.loteproducto",
                        verbose_name="Lote",
                    ),
                ),
                (
                    "movimiento",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="detalles",
                        to="inventario.movimientoinventario",
                        verbose_name="Movimiento",
                    ),
                ),
                (
                    "producto",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="movimientos_inventario",
                        to="productos.producto",
                        verbose_name="Producto",
                    ),
                ),
            ],
            options={
                "verbose_name": "Detalle de Movimiento",
                "verbose_name_plural": "Detalles de Movimientos",
                "db_table": "inventario_detalle_movimiento",
                "ordering": ["numero_item"],
            },
        ),
        migrations.CreateModel(
            name="StockProducto",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "fecha_creacion",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Fecha y hora de creación del registro",
                        verbose_name="Fecha de Creación",
                    ),
                ),
                (
                    "fecha_actualizacion",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Fecha y hora de última actualización",
                        verbose_name="Fecha de Actualización",
                    ),
                ),
                (
                    "activo",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Indica si el registro está activo",
                        verbose_name="Activo",
                    ),
                ),
                (
                    "cantidad_actual",
                    models.DecimalField(
                        decimal_places=4,
                        default=Decimal("0.0000"),
                        help_text="Cantidad actual en stock",
                        max_digits=12,
                        verbose_name="Cantidad Actual",
                    ),
                ),
                (
                    "cantidad_reservada",
                    models.DecimalField(
                        decimal_places=4,
                        default=Decimal("0.0000"),
                        help_text="Cantidad reservada para pedidos",
                        max_digits=12,
                        verbose_name="Cantidad Reservada",
                    ),
                ),
                (
                    "cantidad_disponible",
                    models.DecimalField(
                        decimal_places=4,
                        default=Decimal("0.0000"),
                        help_text="Cantidad disponible (actual - reservada)",
                        max_digits=12,
                        verbose_name="Cantidad Disponible",
                    ),
                ),
                (
                    "costo_promedio",
                    models.DecimalField(
                        decimal_places=4,
                        default=Decimal("0.0000"),
                        help_text="Costo promedio ponderado",
                        max_digits=12,
                        verbose_name="Costo Promedio",
                    ),
                ),
                (
                    "valor_inventario",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Valor total del inventario",
                        max_digits=12,
                        verbose_name="Valor Inventario",
                    ),
                ),
                (
                    "fecha_ultimo_movimiento",
                    models.DateTimeField(
                        blank=True,
                        help_text="Fecha del último movimiento",
                        null=True,
                        verbose_name="Último Movimiento",
                    ),
                ),
                (
                    "fecha_ultimo_ingreso",
                    models.DateTimeField(
                        blank=True,
                        help_text="Fecha del último ingreso",
                        null=True,
                        verbose_name="Último Ingreso",
                    ),
                ),
                (
                    "fecha_ultima_salida",
                    models.DateTimeField(
                        blank=True,
                        help_text="Fecha de la última salida",
                        null=True,
                        verbose_name="Última Salida",
                    ),
                ),
                (
                    "ubicacion",
                    models.CharField(
                        blank=True,
                        help_text="Ubicación específica en el almacén",
                        max_length=50,
                        null=True,
                        verbose_name="Ubicación",
                    ),
                ),
                (
                    "pasillo",
                    models.CharField(
                        blank=True,
                        help_text="Pasillo del almacén",
                        max_length=20,
                        null=True,
                        verbose_name="Pasillo",
                    ),
                ),
                (
                    "estante",
                    models.CharField(
                        blank=True,
                        help_text="Estante del almacén",
                        max_length=20,
                        null=True,
                        verbose_name="Estante",
                    ),
                ),
                (
                    "nivel",
                    models.CharField(
                        blank=True,
                        help_text="Nivel del estante",
                        max_length=20,
                        null=True,
                        verbose_name="Nivel",
                    ),
                ),
                (
                    "almacen",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="stocks",
                        to="inventario.almacen",
                        verbose_name="Almacén",
                    ),
                ),
                (
                    "producto",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="stocks",
                        to="productos.producto",
                        verbose_name="Producto",
                    ),
                ),
            ],
            options={
                "verbose_name": "Stock de Producto",
                "verbose_name_plural": "Stocks de Productos",
                "db_table": "inventario_stock_producto",
                "ordering": ["producto__codigo", "almacen__codigo"],
                "indexes": [
                    models.Index(fields=["producto"], name="idx_stock_producto"),
                    models.Index(fields=["almacen"], name="idx_stock_almacen"),
                    models.Index(fields=["cantidad_actual"], name="idx_stock_cantidad"),
                    models.Index(
                        fields=["cantidad_disponible"], name="idx_stock_disponible"
                    ),
                    models.Index(fields=["costo_promedio"], name="idx_stock_costo"),
                    models.Index(
                        fields=["fecha_ultimo_movimiento"], name="idx_stock_ultimo_mov"
                    ),
                    models.Index(fields=["activo"], name="idx_stock_activo"),
                ],
                "unique_together": {("producto", "almacen")},
            },
        ),
        migrations.AddIndex(
            model_name="movimientoinventario",
            index=models.Index(fields=["numero"], name="idx_mov_numero"),
        ),
        migrations.AddIndex(
            model_name="movimientoinventario",
            index=models.Index(fields=["fecha_movimiento"], name="idx_mov_fecha"),
        ),
        migrations.AddIndex(
            model_name="movimientoinventario",
            index=models.Index(fields=["tipo_movimiento"], name="idx_mov_tipo"),
        ),
        migrations.AddIndex(
            model_name="movimientoinventario",
            index=models.Index(fields=["almacen"], name="idx_mov_almacen"),
        ),
        migrations.AddIndex(
            model_name="movimientoinventario",
            index=models.Index(fields=["estado"], name="idx_mov_estado"),
        ),
        migrations.AddIndex(
            model_name="movimientoinventario",
            index=models.Index(fields=["usuario_creacion"], name="idx_mov_usuario"),
        ),
        migrations.AddIndex(
            model_name="movimientoinventario",
            index=models.Index(
                fields=["documento_electronico"], name="idx_mov_documento"
            ),
        ),
        migrations.AddIndex(
            model_name="movimientoinventario",
            index=models.Index(fields=["proveedor_cliente"], name="idx_mov_proveedor"),
        ),
        migrations.AddIndex(
            model_name="movimientoinventario",
            index=models.Index(fields=["activo"], name="idx_mov_activo"),
        ),
        migrations.AddIndex(
            model_name="loteproducto",
            index=models.Index(
                fields=["producto"], name="idx_inventario_lote_producto"
            ),
        ),
        migrations.AddIndex(
            model_name="loteproducto",
            index=models.Index(fields=["almacen"], name="idx_lote_almacen"),
        ),
        migrations.AddIndex(
            model_name="loteproducto",
            index=models.Index(fields=["numero_lote"], name="idx_lote_numero"),
        ),
        migrations.AddIndex(
            model_name="loteproducto",
            index=models.Index(fields=["fecha_ingreso"], name="idx_lote_fecha_ing"),
        ),
        migrations.AddIndex(
            model_name="loteproducto",
            index=models.Index(
                fields=["fecha_vencimiento"], name="idx_lote_vencimiento"
            ),
        ),
        migrations.AddIndex(
            model_name="loteproducto",
            index=models.Index(fields=["cantidad_actual"], name="idx_lote_cantidad"),
        ),
        migrations.AddIndex(
            model_name="loteproducto",
            index=models.Index(fields=["estado_calidad"], name="idx_lote_calidad"),
        ),
        migrations.AddIndex(
            model_name="loteproducto",
            index=models.Index(fields=["activo"], name="idx_lote_activo"),
        ),
        migrations.AlterUniqueTogether(
            name="loteproducto",
            unique_together={("producto", "almacen", "numero_lote")},
        ),
        migrations.AddIndex(
            model_name="detallemovimiento",
            index=models.Index(fields=["movimiento"], name="idx_det_mov_movimiento"),
        ),
        migrations.AddIndex(
            model_name="detallemovimiento",
            index=models.Index(fields=["producto"], name="idx_det_mov_producto"),
        ),
        migrations.AddIndex(
            model_name="detallemovimiento",
            index=models.Index(fields=["lote"], name="idx_det_mov_lote"),
        ),
        migrations.AddIndex(
            model_name="detallemovimiento",
            index=models.Index(fields=["ejecutado"], name="idx_det_mov_ejecutado"),
        ),
        migrations.AddIndex(
            model_name="detallemovimiento",
            index=models.Index(fields=["activo"], name="idx_det_mov_activo"),
        ),
        migrations.AlterUniqueTogether(
            name="detallemovimiento",
            unique_together={("movimiento", "numero_item")},
        ),
        migrations.AddIndex(
            model_name="almacen",
            index=models.Index(fields=["codigo"], name="idx_almacen_codigo"),
        ),
        migrations.AddIndex(
            model_name="almacen",
            index=models.Index(fields=["sucursal"], name="idx_almacen_sucursal"),
        ),
        migrations.AddIndex(
            model_name="almacen",
            index=models.Index(fields=["es_principal"], name="idx_almacen_principal"),
        ),
        migrations.AddIndex(
            model_name="almacen",
            index=models.Index(fields=["activo"], name="idx_almacen_activo"),
        ),
    ]
