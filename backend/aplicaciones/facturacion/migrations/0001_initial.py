# Generated by Django 4.2.23 on 2025-06-22 19:40

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("core", "0001_initial"),
        ("clientes", "__first__"),
        ("productos", "__first__"),
    ]

    operations = [
        migrations.CreateModel(
            name="DetalleDocumento",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "fecha_creacion",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Fecha y hora de creación del registro",
                        verbose_name="Fecha de Creación",
                    ),
                ),
                (
                    "fecha_actualizacion",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Fecha y hora de última actualización",
                        verbose_name="Fecha de Actualización",
                    ),
                ),
                (
                    "activo",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Indica si el registro está activo",
                        verbose_name="Activo",
                    ),
                ),
                (
                    "numero_item",
                    models.PositiveIntegerField(
                        help_text="Número correlativo del item",
                        verbose_name="Número de Item",
                    ),
                ),
                (
                    "codigo_producto",
                    models.CharField(
                        help_text="Código del producto",
                        max_length=50,
                        verbose_name="Código Producto",
                    ),
                ),
                (
                    "descripcion",
                    models.TextField(
                        help_text="Descripción del producto",
                        max_length=500,
                        verbose_name="Descripción",
                    ),
                ),
                (
                    "unidad_medida",
                    models.CharField(
                        help_text="Código de unidad SUNAT",
                        max_length=3,
                        verbose_name="Unidad de Medida",
                    ),
                ),
                (
                    "cantidad",
                    models.DecimalField(
                        decimal_places=4,
                        help_text="Cantidad del producto",
                        max_digits=12,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0001"))
                        ],
                        verbose_name="Cantidad",
                    ),
                ),
                (
                    "precio_unitario",
                    models.DecimalField(
                        decimal_places=4,
                        help_text="Precio unitario sin IGV",
                        max_digits=12,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="Precio Unitario",
                    ),
                ),
                (
                    "precio_unitario_con_igv",
                    models.DecimalField(
                        decimal_places=4,
                        default=Decimal("0.0000"),
                        help_text="Precio unitario con IGV",
                        max_digits=12,
                        verbose_name="Precio Unit. c/IGV",
                    ),
                ),
                (
                    "descuento_porcentaje",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Porcentaje de descuento",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00")),
                            django.core.validators.MaxValueValidator(Decimal("100.00")),
                        ],
                        verbose_name="Descuento (%)",
                    ),
                ),
                (
                    "descuento",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Monto de descuento",
                        max_digits=12,
                        verbose_name="Descuento",
                    ),
                ),
                (
                    "subtotal",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Subtotal del item",
                        max_digits=12,
                        verbose_name="Subtotal",
                    ),
                ),
                (
                    "base_imponible",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Base imponible del item",
                        max_digits=12,
                        verbose_name="Base Imponible",
                    ),
                ),
                (
                    "igv",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="IGV del item",
                        max_digits=12,
                        verbose_name="IGV",
                    ),
                ),
                (
                    "total_item",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Total del item con IGV",
                        max_digits=12,
                        verbose_name="Total Item",
                    ),
                ),
                (
                    "tipo_afectacion_igv",
                    models.CharField(
                        default="10",
                        help_text="Código de afectación IGV según SUNAT",
                        max_length=2,
                        verbose_name="Tipo Afectación IGV",
                    ),
                ),
                (
                    "codigo_tributo",
                    models.CharField(
                        default="1000",
                        help_text="Código de tributo SUNAT",
                        max_length=4,
                        verbose_name="Código Tributo",
                    ),
                ),
                (
                    "porcentaje_igv",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("18.00"),
                        help_text="Porcentaje de IGV aplicado",
                        max_digits=5,
                        verbose_name="Porcentaje IGV",
                    ),
                ),
                (
                    "es_gratuito",
                    models.BooleanField(
                        default=False,
                        help_text="Si el item es gratuito",
                        verbose_name="Es Gratuito",
                    ),
                ),
                (
                    "lote",
                    models.CharField(
                        blank=True,
                        help_text="Número de lote del producto",
                        max_length=50,
                        null=True,
                        verbose_name="Lote",
                    ),
                ),
                (
                    "fecha_vencimiento_producto",
                    models.DateField(
                        blank=True,
                        help_text="Fecha de vencimiento del producto",
                        null=True,
                        verbose_name="Vencimiento Producto",
                    ),
                ),
                (
                    "observaciones",
                    models.TextField(
                        blank=True,
                        help_text="Observaciones del item",
                        null=True,
                        verbose_name="Observaciones",
                    ),
                ),
            ],
            options={
                "verbose_name": "Detalle de Documento",
                "verbose_name_plural": "Detalles de Documentos",
                "db_table": "facturacion_detalle_documento",
                "ordering": ["numero_item"],
            },
        ),
        migrations.CreateModel(
            name="DocumentoElectronico",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "fecha_creacion",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Fecha y hora de creación del registro",
                        verbose_name="Fecha de Creación",
                    ),
                ),
                (
                    "fecha_actualizacion",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Fecha y hora de última actualización",
                        verbose_name="Fecha de Actualización",
                    ),
                ),
                (
                    "activo",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Indica si el registro está activo",
                        verbose_name="Activo",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Identificador único universal",
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "numero",
                    models.PositiveIntegerField(
                        help_text="Número correlativo del documento",
                        verbose_name="Número",
                    ),
                ),
                (
                    "numero_completo",
                    models.CharField(
                        db_index=True,
                        help_text="Serie-Número completo (ej: F001-00000001)",
                        max_length=15,
                        verbose_name="Número Completo",
                    ),
                ),
                (
                    "fecha_emision",
                    models.DateTimeField(
                        db_index=True,
                        default=django.utils.timezone.now,
                        help_text="Fecha y hora de emisión",
                        verbose_name="Fecha de Emisión",
                    ),
                ),
                (
                    "fecha_vencimiento",
                    models.DateField(
                        blank=True,
                        help_text="Fecha de vencimiento del documento",
                        null=True,
                        verbose_name="Fecha de Vencimiento",
                    ),
                ),
                (
                    "cliente_tipo_documento",
                    models.CharField(
                        help_text="Tipo de documento del cliente",
                        max_length=2,
                        verbose_name="Cliente Tipo Doc",
                    ),
                ),
                (
                    "cliente_numero_documento",
                    models.CharField(
                        help_text="Número de documento del cliente",
                        max_length=15,
                        verbose_name="Cliente Número Doc",
                    ),
                ),
                (
                    "cliente_razon_social",
                    models.CharField(
                        help_text="Razón social del cliente",
                        max_length=200,
                        verbose_name="Cliente Razón Social",
                    ),
                ),
                (
                    "cliente_direccion",
                    models.TextField(
                        help_text="Dirección del cliente",
                        max_length=300,
                        verbose_name="Cliente Dirección",
                    ),
                ),
                (
                    "cliente_email",
                    models.EmailField(
                        blank=True,
                        help_text="Email del cliente",
                        max_length=254,
                        null=True,
                        verbose_name="Cliente Email",
                    ),
                ),
                (
                    "moneda",
                    models.CharField(
                        choices=[
                            ("PEN", "Soles"),
                            ("USD", "Dólares Americanos"),
                            ("EUR", "Euros"),
                        ],
                        default="PEN",
                        help_text="Moneda del documento",
                        max_length=3,
                        verbose_name="Moneda",
                    ),
                ),
                (
                    "tipo_cambio",
                    models.DecimalField(
                        decimal_places=4,
                        default=Decimal("1.0000"),
                        help_text="Tipo de cambio del día",
                        max_digits=8,
                        verbose_name="Tipo de Cambio",
                    ),
                ),
                (
                    "subtotal",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Subtotal sin IGV",
                        max_digits=12,
                        verbose_name="Subtotal",
                    ),
                ),
                (
                    "total_descuentos",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Total de descuentos aplicados",
                        max_digits=12,
                        verbose_name="Total Descuentos",
                    ),
                ),
                (
                    "base_imponible",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Base imponible gravada",
                        max_digits=12,
                        verbose_name="Base Imponible",
                    ),
                ),
                (
                    "igv",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Impuesto General a las Ventas",
                        max_digits=12,
                        verbose_name="IGV",
                    ),
                ),
                (
                    "total_exonerado",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Total de operaciones exoneradas",
                        max_digits=12,
                        verbose_name="Total Exonerado",
                    ),
                ),
                (
                    "total_inafecto",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Total de operaciones inafectas",
                        max_digits=12,
                        verbose_name="Total Inafecto",
                    ),
                ),
                (
                    "total_gratuito",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Total de operaciones gratuitas",
                        max_digits=12,
                        verbose_name="Total Gratuito",
                    ),
                ),
                (
                    "total",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Total del documento",
                        max_digits=12,
                        verbose_name="Total",
                    ),
                ),
                (
                    "observaciones",
                    models.TextField(
                        blank=True,
                        help_text="Observaciones del documento",
                        null=True,
                        verbose_name="Observaciones",
                    ),
                ),
                (
                    "condiciones_pago",
                    models.CharField(
                        default="CONTADO",
                        help_text="Condiciones de pago",
                        max_length=100,
                        verbose_name="Condiciones de Pago",
                    ),
                ),
                (
                    "estado",
                    models.CharField(
                        choices=[
                            ("borrador", "Borrador"),
                            ("emitido", "Emitido"),
                            ("enviado_sunat", "Enviado a SUNAT"),
                            ("aceptado_sunat", "Aceptado por SUNAT"),
                            ("rechazado_sunat", "Rechazado por SUNAT"),
                            ("anulado", "Anulado"),
                            ("observado", "Observado"),
                        ],
                        db_index=True,
                        default="borrador",
                        help_text="Estado actual del documento",
                        max_length=20,
                        verbose_name="Estado",
                    ),
                ),
                (
                    "motivo_anulacion",
                    models.TextField(
                        blank=True,
                        help_text="Motivo de anulación del documento",
                        null=True,
                        verbose_name="Motivo de Anulación",
                    ),
                ),
                (
                    "hash_documento",
                    models.CharField(
                        blank=True,
                        help_text="Hash generado por SUNAT",
                        max_length=100,
                        null=True,
                        verbose_name="Hash SUNAT",
                    ),
                ),
                (
                    "codigo_qr",
                    models.TextField(
                        blank=True,
                        help_text="Datos para código QR",
                        null=True,
                        verbose_name="Código QR",
                    ),
                ),
                (
                    "enlace_pdf",
                    models.URLField(
                        blank=True,
                        help_text="Enlace al PDF del documento",
                        null=True,
                        verbose_name="Enlace PDF",
                    ),
                ),
                (
                    "enlace_xml",
                    models.URLField(
                        blank=True,
                        help_text="Enlace al XML del documento",
                        null=True,
                        verbose_name="Enlace XML",
                    ),
                ),
                (
                    "enlace_cdr",
                    models.URLField(
                        blank=True,
                        help_text="Enlace al CDR de SUNAT",
                        null=True,
                        verbose_name="Enlace CDR",
                    ),
                ),
                (
                    "fecha_envio_sunat",
                    models.DateTimeField(
                        blank=True,
                        help_text="Fecha de envío a SUNAT",
                        null=True,
                        verbose_name="Fecha Envío SUNAT",
                    ),
                ),
                (
                    "fecha_respuesta_sunat",
                    models.DateTimeField(
                        blank=True,
                        help_text="Fecha de respuesta de SUNAT",
                        null=True,
                        verbose_name="Fecha Respuesta SUNAT",
                    ),
                ),
                (
                    "tipo_nota",
                    models.CharField(
                        blank=True,
                        help_text="Tipo de nota de crédito/débito",
                        max_length=2,
                        null=True,
                        verbose_name="Tipo de Nota",
                    ),
                ),
                (
                    "motivo_nota",
                    models.TextField(
                        blank=True,
                        help_text="Motivo de la nota de crédito/débito",
                        null=True,
                        verbose_name="Motivo de Nota",
                    ),
                ),
            ],
            options={
                "verbose_name": "Documento Electrónico",
                "verbose_name_plural": "Documentos Electrónicos",
                "db_table": "facturacion_documento_electronico",
                "ordering": ["-fecha_emision", "-numero"],
            },
        ),
        migrations.CreateModel(
            name="FormaPago",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "fecha_creacion",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Fecha y hora de creación del registro",
                        verbose_name="Fecha de Creación",
                    ),
                ),
                (
                    "fecha_actualizacion",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Fecha y hora de última actualización",
                        verbose_name="Fecha de Actualización",
                    ),
                ),
                (
                    "activo",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Indica si el registro está activo",
                        verbose_name="Activo",
                    ),
                ),
                (
                    "codigo",
                    models.CharField(
                        db_index=True,
                        help_text="Código único de la forma de pago",
                        max_length=20,
                        unique=True,
                        verbose_name="Código",
                    ),
                ),
                (
                    "nombre",
                    models.CharField(
                        help_text="Nombre de la forma de pago",
                        max_length=100,
                        verbose_name="Nombre",
                    ),
                ),
                (
                    "tipo",
                    models.CharField(
                        choices=[
                            ("efectivo", "Efectivo"),
                            ("transferencia", "Transferencia Bancaria"),
                            ("tarjeta_credito", "Tarjeta de Crédito"),
                            ("tarjeta_debito", "Tarjeta de Débito"),
                            ("cheque", "Cheque"),
                            ("deposito", "Depósito Bancario"),
                            ("yape", "Yape"),
                            ("plin", "Plin"),
                            ("billetera_digital", "Billetera Digital"),
                            ("credito", "Crédito"),
                        ],
                        help_text="Tipo de forma de pago",
                        max_length=20,
                        verbose_name="Tipo",
                    ),
                ),
                (
                    "requiere_referencia",
                    models.BooleanField(
                        default=False,
                        help_text="Si requiere número de referencia",
                        verbose_name="Requiere Referencia",
                    ),
                ),
                (
                    "es_credito",
                    models.BooleanField(
                        default=False,
                        help_text="Si es una forma de pago a crédito",
                        verbose_name="Es Crédito",
                    ),
                ),
                (
                    "dias_credito_defecto",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Días de crédito por defecto",
                        verbose_name="Días Crédito",
                    ),
                ),
                (
                    "cuenta_contable",
                    models.CharField(
                        blank=True,
                        help_text="Cuenta contable asociada",
                        max_length=10,
                        null=True,
                        verbose_name="Cuenta Contable",
                    ),
                ),
                (
                    "orden",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Orden de visualización",
                        verbose_name="Orden",
                    ),
                ),
            ],
            options={
                "verbose_name": "Forma de Pago",
                "verbose_name_plural": "Formas de Pago",
                "db_table": "facturacion_forma_pago",
                "ordering": ["orden", "nombre"],
            },
        ),
        migrations.CreateModel(
            name="TipoDocumentoElectronico",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "fecha_creacion",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Fecha y hora de creación del registro",
                        verbose_name="Fecha de Creación",
                    ),
                ),
                (
                    "fecha_actualizacion",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Fecha y hora de última actualización",
                        verbose_name="Fecha de Actualización",
                    ),
                ),
                (
                    "activo",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Indica si el registro está activo",
                        verbose_name="Activo",
                    ),
                ),
                (
                    "codigo_sunat",
                    models.CharField(
                        choices=[
                            ("01", "Factura"),
                            ("03", "Boleta de Venta"),
                            ("07", "Nota de Crédito"),
                            ("08", "Nota de Débito"),
                            ("09", "Guía de Remisión"),
                            ("12", "Ticket de Máquina Registradora"),
                            ("13", "Documento emitido por bancos"),
                            ("14", "Recibo por servicios públicos"),
                            ("20", "Comprobante de Retención"),
                            ("40", "Constancia de Depósito DETRACCION"),
                        ],
                        db_index=True,
                        help_text="Código según tabla 10 SUNAT",
                        max_length=2,
                        unique=True,
                        verbose_name="Código SUNAT",
                    ),
                ),
                (
                    "nombre",
                    models.CharField(
                        help_text="Nombre del tipo de documento",
                        max_length=100,
                        verbose_name="Nombre",
                    ),
                ),
                (
                    "nomenclatura",
                    models.CharField(
                        help_text="Nomenclatura del documento (F, B, NC, ND)",
                        max_length=10,
                        verbose_name="Nomenclatura",
                    ),
                ),
                (
                    "requiere_cliente_ruc",
                    models.BooleanField(
                        default=False,
                        help_text="Si requiere que el cliente tenga RUC",
                        verbose_name="Requiere Cliente RUC",
                    ),
                ),
                (
                    "permite_exportacion",
                    models.BooleanField(
                        default=False,
                        help_text="Si permite operaciones de exportación",
                        verbose_name="Permite Exportación",
                    ),
                ),
                (
                    "afecta_inventario",
                    models.BooleanField(
                        default=True,
                        help_text="Si afecta el stock de productos",
                        verbose_name="Afecta Inventario",
                    ),
                ),
                (
                    "afecta_cuentas_cobrar",
                    models.BooleanField(
                        default=True,
                        help_text="Si genera cuentas por cobrar",
                        verbose_name="Afecta Cuentas por Cobrar",
                    ),
                ),
                (
                    "requiere_referencia",
                    models.BooleanField(
                        default=False,
                        help_text="Si requiere documento de referencia",
                        verbose_name="Requiere Referencia",
                    ),
                ),
                (
                    "serie_defecto",
                    models.CharField(
                        help_text="Serie por defecto para el documento",
                        max_length=4,
                        verbose_name="Serie por Defecto",
                    ),
                ),
            ],
            options={
                "verbose_name": "Tipo de Documento Electrónico",
                "verbose_name_plural": "Tipos de Documentos Electrónicos",
                "db_table": "facturacion_tipo_documento_electronico",
                "indexes": [
                    models.Index(
                        fields=["codigo_sunat"], name="idx_tipo_doc_elec_codigo"
                    ),
                    models.Index(fields=["activo"], name="idx_tipo_doc_elec_activo"),
                ],
            },
        ),
        migrations.CreateModel(
            name="SerieDocumento",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "fecha_creacion",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Fecha y hora de creación del registro",
                        verbose_name="Fecha de Creación",
                    ),
                ),
                (
                    "fecha_actualizacion",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Fecha y hora de última actualización",
                        verbose_name="Fecha de Actualización",
                    ),
                ),
                (
                    "activo",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Indica si el registro está activo",
                        verbose_name="Activo",
                    ),
                ),
                (
                    "serie",
                    models.CharField(
                        help_text="Serie del documento (ej: F001, B001)",
                        max_length=4,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="La serie debe tener 4 caracteres alfanuméricos",
                                regex="^[A-Z0-9]{4}$",
                            )
                        ],
                        verbose_name="Serie",
                    ),
                ),
                (
                    "numero_actual",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Último número emitido",
                        verbose_name="Número Actual",
                    ),
                ),
                (
                    "numero_maximo",
                    models.PositiveIntegerField(
                        default=99999999,
                        help_text="Número máximo permitido",
                        verbose_name="Número Máximo",
                    ),
                ),
                (
                    "es_predeterminada",
                    models.BooleanField(
                        default=False,
                        help_text="Si es la serie predeterminada para el tipo",
                        verbose_name="Es Predeterminada",
                    ),
                ),
                (
                    "observaciones",
                    models.TextField(
                        blank=True,
                        help_text="Observaciones de la serie",
                        null=True,
                        verbose_name="Observaciones",
                    ),
                ),
                (
                    "sucursal",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="series_documentos",
                        to="core.sucursal",
                        verbose_name="Sucursal",
                    ),
                ),
                (
                    "tipo_documento",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="series",
                        to="facturacion.tipodocumentoelectronico",
                        verbose_name="Tipo de Documento",
                    ),
                ),
            ],
            options={
                "verbose_name": "Serie de Documento",
                "verbose_name_plural": "Series de Documentos",
                "db_table": "facturacion_serie_documento",
            },
        ),
        migrations.CreateModel(
            name="PagoDocumento",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "fecha_creacion",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Fecha y hora de creación del registro",
                        verbose_name="Fecha de Creación",
                    ),
                ),
                (
                    "fecha_actualizacion",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Fecha y hora de última actualización",
                        verbose_name="Fecha de Actualización",
                    ),
                ),
                (
                    "activo",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Indica si el registro está activo",
                        verbose_name="Activo",
                    ),
                ),
                (
                    "monto",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Monto del pago",
                        max_digits=12,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                        verbose_name="Monto",
                    ),
                ),
                (
                    "referencia",
                    models.CharField(
                        blank=True,
                        help_text="Número de referencia del pago",
                        max_length=100,
                        null=True,
                        verbose_name="Referencia",
                    ),
                ),
                (
                    "fecha_pago",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="Fecha y hora del pago",
                        verbose_name="Fecha de Pago",
                    ),
                ),
                (
                    "observaciones",
                    models.TextField(
                        blank=True,
                        help_text="Observaciones del pago",
                        null=True,
                        verbose_name="Observaciones",
                    ),
                ),
                (
                    "documento",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pagos",
                        to="facturacion.documentoelectronico",
                        verbose_name="Documento",
                    ),
                ),
                (
                    "forma_pago",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="pagos",
                        to="facturacion.formapago",
                        verbose_name="Forma de Pago",
                    ),
                ),
            ],
            options={
                "verbose_name": "Pago de Documento",
                "verbose_name_plural": "Pagos de Documentos",
                "db_table": "facturacion_pago_documento",
                "ordering": ["fecha_pago"],
            },
        ),
        migrations.AddIndex(
            model_name="formapago",
            index=models.Index(fields=["codigo"], name="idx_forma_pago_codigo"),
        ),
        migrations.AddIndex(
            model_name="formapago",
            index=models.Index(fields=["tipo"], name="idx_forma_pago_tipo"),
        ),
        migrations.AddIndex(
            model_name="formapago",
            index=models.Index(fields=["orden"], name="idx_forma_pago_orden"),
        ),
        migrations.AddIndex(
            model_name="formapago",
            index=models.Index(fields=["activo"], name="idx_forma_pago_activo"),
        ),
        migrations.AddField(
            model_name="documentoelectronico",
            name="cliente",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="documentos_electronicos",
                to="clientes.cliente",
                verbose_name="Cliente",
            ),
        ),
        migrations.AddField(
            model_name="documentoelectronico",
            name="documento_referencia",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="documentos_relacionados",
                to="facturacion.documentoelectronico",
                verbose_name="Documento de Referencia",
            ),
        ),
        migrations.AddField(
            model_name="documentoelectronico",
            name="serie_documento",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="documentos",
                to="facturacion.seriedocumento",
                verbose_name="Serie",
            ),
        ),
        migrations.AddField(
            model_name="documentoelectronico",
            name="tipo_documento",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="documentos",
                to="facturacion.tipodocumentoelectronico",
                verbose_name="Tipo de Documento",
            ),
        ),
        migrations.AddField(
            model_name="documentoelectronico",
            name="vendedor",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="documentos_vendidos",
                to=settings.AUTH_USER_MODEL,
                verbose_name="Vendedor",
            ),
        ),
        migrations.AddField(
            model_name="detalledocumento",
            name="documento",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="detalles",
                to="facturacion.documentoelectronico",
                verbose_name="Documento",
            ),
        ),
        migrations.AddField(
            model_name="detalledocumento",
            name="producto",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="detalles_facturacion",
                to="productos.producto",
                verbose_name="Producto",
            ),
        ),
        migrations.AddIndex(
            model_name="seriedocumento",
            index=models.Index(fields=["sucursal"], name="idx_serie_sucursal"),
        ),
        migrations.AddIndex(
            model_name="seriedocumento",
            index=models.Index(fields=["tipo_documento"], name="idx_serie_tipo_doc"),
        ),
        migrations.AddIndex(
            model_name="seriedocumento",
            index=models.Index(fields=["serie"], name="idx_serie_serie"),
        ),
        migrations.AddIndex(
            model_name="seriedocumento",
            index=models.Index(fields=["es_predeterminada"], name="idx_serie_default"),
        ),
        migrations.AddIndex(
            model_name="seriedocumento",
            index=models.Index(fields=["activo"], name="idx_serie_activo"),
        ),
        migrations.AlterUniqueTogether(
            name="seriedocumento",
            unique_together={("sucursal", "tipo_documento", "serie")},
        ),
        migrations.AddIndex(
            model_name="pagodocumento",
            index=models.Index(fields=["documento"], name="idx_pago_documento"),
        ),
        migrations.AddIndex(
            model_name="pagodocumento",
            index=models.Index(fields=["forma_pago"], name="idx_pago_forma"),
        ),
        migrations.AddIndex(
            model_name="pagodocumento",
            index=models.Index(fields=["fecha_pago"], name="idx_pago_fecha"),
        ),
        migrations.AddIndex(
            model_name="pagodocumento",
            index=models.Index(fields=["activo"], name="idx_pago_activo"),
        ),
        migrations.AddIndex(
            model_name="documentoelectronico",
            index=models.Index(
                fields=["numero_completo"], name="idx_doc_numero_completo"
            ),
        ),
        migrations.AddIndex(
            model_name="documentoelectronico",
            index=models.Index(fields=["fecha_emision"], name="idx_doc_fecha_emision"),
        ),
        migrations.AddIndex(
            model_name="documentoelectronico",
            index=models.Index(fields=["cliente"], name="idx_doc_cliente"),
        ),
        migrations.AddIndex(
            model_name="documentoelectronico",
            index=models.Index(fields=["estado"], name="idx_doc_estado"),
        ),
        migrations.AddIndex(
            model_name="documentoelectronico",
            index=models.Index(fields=["tipo_documento"], name="idx_doc_tipo"),
        ),
        migrations.AddIndex(
            model_name="documentoelectronico",
            index=models.Index(fields=["vendedor"], name="idx_doc_vendedor"),
        ),
        migrations.AddIndex(
            model_name="documentoelectronico",
            index=models.Index(fields=["moneda"], name="idx_doc_moneda"),
        ),
        migrations.AddIndex(
            model_name="documentoelectronico",
            index=models.Index(fields=["total"], name="idx_doc_total"),
        ),
        migrations.AddIndex(
            model_name="documentoelectronico",
            index=models.Index(fields=["uuid"], name="idx_doc_uuid"),
        ),
        migrations.AddIndex(
            model_name="documentoelectronico",
            index=models.Index(fields=["hash_documento"], name="idx_doc_hash"),
        ),
        migrations.AddIndex(
            model_name="documentoelectronico",
            index=models.Index(
                fields=["fecha_vencimiento"], name="idx_doc_vencimiento"
            ),
        ),
        migrations.AddIndex(
            model_name="documentoelectronico",
            index=models.Index(fields=["activo"], name="idx_doc_activo"),
        ),
        migrations.AlterUniqueTogether(
            name="documentoelectronico",
            unique_together={("serie_documento", "numero")},
        ),
        migrations.AddIndex(
            model_name="detalledocumento",
            index=models.Index(fields=["documento"], name="idx_detalle_documento"),
        ),
        migrations.AddIndex(
            model_name="detalledocumento",
            index=models.Index(
                fields=["producto"], name="idx_detalle_factura_producto"
            ),
        ),
        migrations.AddIndex(
            model_name="detalledocumento",
            index=models.Index(fields=["numero_item"], name="idx_detalle_numero"),
        ),
        migrations.AddIndex(
            model_name="detalledocumento",
            index=models.Index(fields=["activo"], name="idx_detalle_factura_activo"),
        ),
        migrations.AlterUniqueTogether(
            name="detalledocumento",
            unique_together={("documento", "numero_item")},
        ),
    ]
