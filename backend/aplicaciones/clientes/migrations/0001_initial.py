# Generated by Django 4.2.23 on 2025-06-22 22:30

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="TipoDocumento",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "fecha_creacion",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Fecha y hora de creación del registro",
                        verbose_name="Fecha de Creación",
                    ),
                ),
                (
                    "fecha_actualizacion",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Fecha y hora de última actualización",
                        verbose_name="Fecha de Actualización",
                    ),
                ),
                (
                    "activo",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Indica si el registro está activo",
                        verbose_name="Activo",
                    ),
                ),
                (
                    "codigo",
                    models.CharField(
                        choices=[
                            ("1", "DNI - Documento Nacional de Identidad"),
                            ("4", "Carnet de Extranjería"),
                            ("6", "RUC - Registro Único de Contribuyentes"),
                            ("7", "Pasaporte"),
                            ("11", "Partida de Nacimiento"),
                            ("12", "Tarjeta de Identidad de FF.AA."),
                            ("0", "Otros"),
                        ],
                        db_index=True,
                        help_text="Código según tabla 2 SUNAT",
                        max_length=2,
                        unique=True,
                        verbose_name="Código SUNAT",
                    ),
                ),
                (
                    "nombre",
                    models.CharField(
                        help_text="Nombre del tipo de documento",
                        max_length=100,
                        verbose_name="Nombre",
                    ),
                ),
                (
                    "longitud_minima",
                    models.PositiveIntegerField(
                        default=8,
                        help_text="Número mínimo de caracteres",
                        verbose_name="Longitud Mínima",
                    ),
                ),
                (
                    "longitud_maxima",
                    models.PositiveIntegerField(
                        default=11,
                        help_text="Número máximo de caracteres",
                        verbose_name="Longitud Máxima",
                    ),
                ),
                (
                    "solo_numeros",
                    models.BooleanField(
                        default=True,
                        help_text="Si el documento solo acepta números",
                        verbose_name="Solo Números",
                    ),
                ),
                (
                    "requiere_validacion",
                    models.BooleanField(
                        default=False,
                        help_text="Si requiere validación con algoritmo",
                        verbose_name="Requiere Validación",
                    ),
                ),
            ],
            options={
                "verbose_name": "Tipo de Documento",
                "verbose_name_plural": "Tipos de Documento",
                "db_table": "clientes_tipo_documento",
                "indexes": [
                    models.Index(fields=["codigo"], name="idx_tipo_doc_codigo"),
                    models.Index(fields=["activo"], name="idx_tipo_doc_activo"),
                ],
            },
        ),
        migrations.CreateModel(
            name="Cliente",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "fecha_creacion",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Fecha y hora de creación del registro",
                        verbose_name="Fecha de Creación",
                    ),
                ),
                (
                    "fecha_actualizacion",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Fecha y hora de última actualización",
                        verbose_name="Fecha de Actualización",
                    ),
                ),
                (
                    "activo",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Indica si el registro está activo",
                        verbose_name="Activo",
                    ),
                ),
                (
                    "tipo_cliente",
                    models.CharField(
                        choices=[
                            ("persona_natural", "Persona Natural"),
                            ("persona_juridica", "Persona Jurídica"),
                            ("extranjero", "Extranjero"),
                        ],
                        db_index=True,
                        default="persona_natural",
                        help_text="Tipo de cliente según SUNAT",
                        max_length=20,
                        verbose_name="Tipo de Cliente",
                    ),
                ),
                (
                    "numero_documento",
                    models.CharField(
                        db_index=True,
                        help_text="Número de documento (DNI, RUC, etc.)",
                        max_length=15,
                        verbose_name="Número de Documento",
                    ),
                ),
                (
                    "razon_social",
                    models.CharField(
                        help_text="Razón social o nombres completos",
                        max_length=200,
                        verbose_name="Razón Social",
                    ),
                ),
                (
                    "nombre_comercial",
                    models.CharField(
                        blank=True,
                        help_text="Nombre comercial (opcional)",
                        max_length=150,
                        null=True,
                        verbose_name="Nombre Comercial",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        help_text="Correo electrónico",
                        max_length=254,
                        null=True,
                        validators=[django.core.validators.EmailValidator()],
                        verbose_name="Email",
                    ),
                ),
                (
                    "telefono",
                    models.CharField(
                        blank=True,
                        help_text="Número de teléfono",
                        max_length=15,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Formato de teléfono inválido",
                                regex="^(\\+51)?[0-9]{9,12}$",
                            )
                        ],
                        verbose_name="Teléfono",
                    ),
                ),
                (
                    "celular",
                    models.CharField(
                        blank=True,
                        help_text="Número de celular",
                        max_length=15,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Formato de teléfono inválido",
                                regex="^(\\+51)?[0-9]{9,12}$",
                            )
                        ],
                        verbose_name="Celular",
                    ),
                ),
                (
                    "direccion",
                    models.TextField(
                        help_text="Dirección fiscal completa",
                        max_length=300,
                        verbose_name="Dirección",
                    ),
                ),
                (
                    "ubigeo",
                    models.CharField(
                        help_text="Código de ubigeo (6 dígitos)",
                        max_length=6,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Ubigeo debe tener 6 dígitos", regex="^\\d{6}$"
                            )
                        ],
                        verbose_name="Ubigeo",
                    ),
                ),
                (
                    "departamento",
                    models.CharField(
                        help_text="Departamento según ubigeo",
                        max_length=50,
                        verbose_name="Departamento",
                    ),
                ),
                (
                    "provincia",
                    models.CharField(
                        help_text="Provincia según ubigeo",
                        max_length=50,
                        verbose_name="Provincia",
                    ),
                ),
                (
                    "distrito",
                    models.CharField(
                        help_text="Distrito según ubigeo",
                        max_length=50,
                        verbose_name="Distrito",
                    ),
                ),
                (
                    "descuento_maximo",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        help_text="Descuento máximo permitido",
                        max_digits=5,
                        verbose_name="Descuento Máximo (%)",
                    ),
                ),
                (
                    "credito_limite",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        help_text="Límite de crédito en soles",
                        max_digits=12,
                        verbose_name="Límite de Crédito",
                    ),
                ),
                (
                    "dias_credito",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Días de crédito otorgados",
                        verbose_name="Días de Crédito",
                    ),
                ),
                (
                    "es_agente_retencion",
                    models.BooleanField(
                        default=False,
                        help_text="Si es agente de retención IGV",
                        verbose_name="Es Agente de Retención",
                    ),
                ),
                (
                    "es_buen_contribuyente",
                    models.BooleanField(
                        default=False,
                        help_text="Si está en régimen de buen contribuyente",
                        verbose_name="Buen Contribuyente",
                    ),
                ),
                (
                    "bloqueado",
                    models.BooleanField(
                        default=False,
                        help_text="Si el cliente está bloqueado para ventas",
                        verbose_name="Bloqueado",
                    ),
                ),
                (
                    "motivo_bloqueo",
                    models.TextField(
                        blank=True,
                        help_text="Razón del bloqueo",
                        null=True,
                        verbose_name="Motivo de Bloqueo",
                    ),
                ),
                (
                    "fecha_primer_compra",
                    models.DateTimeField(
                        blank=True,
                        help_text="Fecha de primera compra",
                        null=True,
                        verbose_name="Fecha Primera Compra",
                    ),
                ),
                (
                    "fecha_ultima_compra",
                    models.DateTimeField(
                        blank=True,
                        help_text="Fecha de última compra",
                        null=True,
                        verbose_name="Fecha Última Compra",
                    ),
                ),
                (
                    "total_compras",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        help_text="Total acumulado de compras",
                        max_digits=12,
                        verbose_name="Total Compras",
                    ),
                ),
                (
                    "numero_compras",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Cantidad total de compras",
                        verbose_name="Número de Compras",
                    ),
                ),
                (
                    "validado_sunat",
                    models.BooleanField(
                        default=False,
                        help_text="Si fue validado con servicios SUNAT",
                        verbose_name="Validado SUNAT",
                    ),
                ),
                (
                    "fecha_validacion_sunat",
                    models.DateTimeField(
                        blank=True,
                        help_text="Fecha de última validación SUNAT",
                        null=True,
                        verbose_name="Fecha Validación SUNAT",
                    ),
                ),
                (
                    "estado_sunat",
                    models.CharField(
                        blank=True,
                        help_text="Estado según consulta SUNAT",
                        max_length=20,
                        null=True,
                        verbose_name="Estado SUNAT",
                    ),
                ),
                (
                    "condicion_sunat",
                    models.CharField(
                        blank=True,
                        help_text="Condición según consulta SUNAT",
                        max_length=50,
                        null=True,
                        verbose_name="Condición SUNAT",
                    ),
                ),
                (
                    "tipo_documento",
                    models.ForeignKey(
                        help_text="Tipo de documento de identidad",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="clientes",
                        to="clientes.tipodocumento",
                        verbose_name="Tipo de Documento",
                    ),
                ),
            ],
            options={
                "verbose_name": "Cliente",
                "verbose_name_plural": "Clientes",
                "db_table": "clientes_cliente",
            },
        ),
        migrations.CreateModel(
            name="ContactoCliente",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "fecha_creacion",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Fecha y hora de creación del registro",
                        verbose_name="Fecha de Creación",
                    ),
                ),
                (
                    "fecha_actualizacion",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Fecha y hora de última actualización",
                        verbose_name="Fecha de Actualización",
                    ),
                ),
                (
                    "activo",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Indica si el registro está activo",
                        verbose_name="Activo",
                    ),
                ),
                (
                    "nombres",
                    models.CharField(
                        help_text="Nombres del contacto",
                        max_length=100,
                        verbose_name="Nombres",
                    ),
                ),
                (
                    "apellidos",
                    models.CharField(
                        help_text="Apellidos del contacto",
                        max_length=100,
                        verbose_name="Apellidos",
                    ),
                ),
                (
                    "cargo",
                    models.CharField(
                        blank=True,
                        help_text="Cargo en la empresa",
                        max_length=80,
                        null=True,
                        verbose_name="Cargo",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        help_text="Email del contacto",
                        max_length=254,
                        null=True,
                        verbose_name="Email",
                    ),
                ),
                (
                    "telefono",
                    models.CharField(
                        blank=True,
                        help_text="Teléfono del contacto",
                        max_length=15,
                        null=True,
                        verbose_name="Teléfono",
                    ),
                ),
                (
                    "es_principal",
                    models.BooleanField(
                        default=False,
                        help_text="Si es el contacto principal",
                        verbose_name="Es Principal",
                    ),
                ),
                (
                    "recibe_facturas",
                    models.BooleanField(
                        default=True,
                        help_text="Si recibe copias de facturas",
                        verbose_name="Recibe Facturas",
                    ),
                ),
                (
                    "notas",
                    models.TextField(
                        blank=True,
                        help_text="Notas adicionales del contacto",
                        null=True,
                        verbose_name="Notas",
                    ),
                ),
                (
                    "cliente",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="contactos",
                        to="clientes.cliente",
                        verbose_name="Cliente",
                    ),
                ),
            ],
            options={
                "verbose_name": "Contacto de Cliente",
                "verbose_name_plural": "Contactos de Clientes",
                "db_table": "clientes_contacto_cliente",
                "indexes": [
                    models.Index(fields=["cliente"], name="idx_contacto_cliente"),
                    models.Index(
                        fields=["es_principal"], name="idx_contacto_principal"
                    ),
                    models.Index(fields=["activo"], name="idx_contacto_activo"),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="cliente",
            index=models.Index(
                fields=["numero_documento"], name="idx_cliente_numero_doc"
            ),
        ),
        migrations.AddIndex(
            model_name="cliente",
            index=models.Index(fields=["tipo_cliente"], name="idx_cliente_tipo"),
        ),
        migrations.AddIndex(
            model_name="cliente",
            index=models.Index(fields=["activo"], name="idx_cliente_estado_activo"),
        ),
        migrations.AddIndex(
            model_name="cliente",
            index=models.Index(fields=["fecha_creacion"], name="idx_cliente_fecha"),
        ),
        migrations.AddIndex(
            model_name="cliente",
            index=models.Index(
                fields=["razon_social"], name="idx_cliente_razon_social"
            ),
        ),
        migrations.AddIndex(
            model_name="cliente",
            index=models.Index(fields=["ubigeo"], name="idx_cliente_ubigeo"),
        ),
        migrations.AddIndex(
            model_name="cliente",
            index=models.Index(fields=["validado_sunat"], name="idx_cliente_validado"),
        ),
        migrations.AddIndex(
            model_name="cliente",
            index=models.Index(fields=["bloqueado"], name="idx_cliente_bloqueado"),
        ),
        migrations.AlterUniqueTogether(
            name="cliente",
            unique_together={("tipo_documento", "numero_documento")},
        ),
    ]
