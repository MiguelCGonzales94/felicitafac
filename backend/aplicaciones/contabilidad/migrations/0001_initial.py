# Generated by Django 4.2.23 on 2025-06-22 22:30

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("facturacion", "0001_initial"),
        ("clientes", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="AsientoContable",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "fecha_creacion",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Fecha y hora de creación del registro",
                        verbose_name="Fecha de Creación",
                    ),
                ),
                (
                    "fecha_actualizacion",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Fecha y hora de última actualización",
                        verbose_name="Fecha de Actualización",
                    ),
                ),
                (
                    "activo",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Indica si el registro está activo",
                        verbose_name="Activo",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Identificador único universal",
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "numero",
                    models.CharField(
                        db_index=True,
                        help_text="Número del asiento contable",
                        max_length=20,
                        verbose_name="Número",
                    ),
                ),
                (
                    "fecha",
                    models.DateField(
                        db_index=True,
                        help_text="Fecha del asiento contable",
                        verbose_name="Fecha",
                    ),
                ),
                (
                    "tipo_asiento",
                    models.CharField(
                        choices=[
                            ("apertura", "Apertura"),
                            ("diario", "Diario"),
                            ("ajuste", "Ajuste"),
                            ("cierre", "Cierre"),
                            ("automatico", "Automático"),
                        ],
                        db_index=True,
                        default="diario",
                        help_text="Tipo de asiento contable",
                        max_length=20,
                        verbose_name="Tipo de Asiento",
                    ),
                ),
                (
                    "estado",
                    models.CharField(
                        choices=[
                            ("borrador", "Borrador"),
                            ("provisional", "Provisional"),
                            ("definitivo", "Definitivo"),
                            ("anulado", "Anulado"),
                        ],
                        db_index=True,
                        default="borrador",
                        help_text="Estado del asiento",
                        max_length=20,
                        verbose_name="Estado",
                    ),
                ),
                (
                    "glosa",
                    models.TextField(
                        help_text="Descripción del asiento contable",
                        max_length=500,
                        verbose_name="Glosa",
                    ),
                ),
                (
                    "documento_origen",
                    models.CharField(
                        blank=True,
                        help_text="Documento que origina el asiento",
                        max_length=50,
                        null=True,
                        verbose_name="Documento Origen",
                    ),
                ),
                (
                    "moneda",
                    models.CharField(
                        choices=[
                            ("PEN", "Soles"),
                            ("USD", "Dólares"),
                            ("EUR", "Euros"),
                        ],
                        default="PEN",
                        help_text="Moneda del asiento",
                        max_length=3,
                        verbose_name="Moneda",
                    ),
                ),
                (
                    "tipo_cambio",
                    models.DecimalField(
                        decimal_places=4,
                        default=Decimal("1.0000"),
                        help_text="Tipo de cambio del día",
                        max_digits=8,
                        verbose_name="Tipo de Cambio",
                    ),
                ),
                (
                    "total_debe",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Total del debe",
                        max_digits=15,
                        verbose_name="Total Debe",
                    ),
                ),
                (
                    "total_haber",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Total del haber",
                        max_digits=15,
                        verbose_name="Total Haber",
                    ),
                ),
                (
                    "diferencia",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Diferencia entre debe y haber",
                        max_digits=15,
                        verbose_name="Diferencia",
                    ),
                ),
                (
                    "fecha_aprobacion",
                    models.DateTimeField(
                        blank=True,
                        help_text="Fecha de aprobación del asiento",
                        null=True,
                        verbose_name="Fecha Aprobación",
                    ),
                ),
                (
                    "centro_costo",
                    models.CharField(
                        blank=True,
                        help_text="Centro de costo del asiento",
                        max_length=20,
                        null=True,
                        verbose_name="Centro de Costo",
                    ),
                ),
                (
                    "proyecto",
                    models.CharField(
                        blank=True,
                        help_text="Proyecto relacionado",
                        max_length=50,
                        null=True,
                        verbose_name="Proyecto",
                    ),
                ),
                (
                    "observaciones",
                    models.TextField(
                        blank=True,
                        help_text="Observaciones del asiento",
                        null=True,
                        verbose_name="Observaciones",
                    ),
                ),
                (
                    "es_automatico",
                    models.BooleanField(
                        default=False,
                        help_text="Si fue generado automáticamente",
                        verbose_name="Es Automático",
                    ),
                ),
                (
                    "proceso_origen",
                    models.CharField(
                        blank=True,
                        help_text="Proceso que generó el asiento automático",
                        max_length=50,
                        null=True,
                        verbose_name="Proceso Origen",
                    ),
                ),
                (
                    "documento_electronico",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="asientos_contables",
                        to="facturacion.documentoelectronico",
                        verbose_name="Documento Electrónico",
                    ),
                ),
            ],
            options={
                "verbose_name": "Asiento Contable",
                "verbose_name_plural": "Asientos Contables",
                "db_table": "contabilidad_asiento_contable",
                "ordering": ["-fecha", "-numero"],
            },
        ),
        migrations.CreateModel(
            name="PlanCuentas",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "fecha_creacion",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Fecha y hora de creación del registro",
                        verbose_name="Fecha de Creación",
                    ),
                ),
                (
                    "fecha_actualizacion",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Fecha y hora de última actualización",
                        verbose_name="Fecha de Actualización",
                    ),
                ),
                (
                    "activo",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Indica si el registro está activo",
                        verbose_name="Activo",
                    ),
                ),
                (
                    "codigo",
                    models.CharField(
                        db_index=True,
                        help_text="Código de la cuenta según PCGE",
                        max_length=10,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="El código debe contener solo dígitos",
                                regex="^\\d{1,10}$",
                            )
                        ],
                        verbose_name="Código",
                    ),
                ),
                (
                    "nombre",
                    models.CharField(
                        help_text="Nombre de la cuenta contable",
                        max_length=200,
                        verbose_name="Nombre",
                    ),
                ),
                (
                    "descripcion",
                    models.TextField(
                        blank=True,
                        help_text="Descripción detallada de la cuenta",
                        null=True,
                        verbose_name="Descripción",
                    ),
                ),
                (
                    "nivel",
                    models.PositiveIntegerField(
                        choices=[
                            (1, "Elemento (1 dígito)"),
                            (2, "Rubro (2 dígitos)"),
                            (3, "Cuenta (3 dígitos)"),
                            (4, "Divisionaria (4 dígitos)"),
                            (5, "Subdivisionaria (5 dígitos)"),
                        ],
                        help_text="Nivel de la cuenta en la jerarquía",
                        verbose_name="Nivel",
                    ),
                ),
                (
                    "tipo_cuenta",
                    models.CharField(
                        choices=[
                            ("activo", "Activo"),
                            ("pasivo", "Pasivo"),
                            ("patrimonio", "Patrimonio"),
                            ("ingreso", "Ingreso"),
                            ("gasto", "Gasto"),
                            ("resultado", "Resultado"),
                        ],
                        db_index=True,
                        help_text="Tipo de cuenta contable",
                        max_length=20,
                        verbose_name="Tipo de Cuenta",
                    ),
                ),
                (
                    "naturaleza",
                    models.CharField(
                        choices=[("deudora", "Deudora"), ("acreedora", "Acreedora")],
                        help_text="Naturaleza de la cuenta (deudora/acreedora)",
                        max_length=10,
                        verbose_name="Naturaleza",
                    ),
                ),
                (
                    "acepta_movimientos",
                    models.BooleanField(
                        default=True,
                        help_text="Si la cuenta acepta movimientos directos",
                        verbose_name="Acepta Movimientos",
                    ),
                ),
                (
                    "requiere_centro_costo",
                    models.BooleanField(
                        default=False,
                        help_text="Si requiere centro de costo",
                        verbose_name="Requiere Centro de Costo",
                    ),
                ),
                (
                    "requiere_documento",
                    models.BooleanField(
                        default=False,
                        help_text="Si requiere documento de respaldo",
                        verbose_name="Requiere Documento",
                    ),
                ),
                (
                    "moneda_funcional",
                    models.CharField(
                        choices=[
                            ("PEN", "Soles"),
                            ("USD", "Dólares"),
                            ("EUR", "Euros"),
                            ("MIX", "Mixta"),
                        ],
                        default="PEN",
                        help_text="Moneda funcional de la cuenta",
                        max_length=3,
                        verbose_name="Moneda Funcional",
                    ),
                ),
                (
                    "elemento_pcge",
                    models.CharField(
                        db_index=True,
                        help_text="Elemento del PCGE (1-9)",
                        max_length=1,
                        verbose_name="Elemento PCGE",
                    ),
                ),
                (
                    "rubro_pcge",
                    models.CharField(
                        blank=True,
                        help_text="Rubro del PCGE",
                        max_length=2,
                        null=True,
                        verbose_name="Rubro PCGE",
                    ),
                ),
                (
                    "afecta_resultado",
                    models.BooleanField(
                        default=False,
                        help_text="Si afecta el resultado del ejercicio",
                        verbose_name="Afecta Resultado",
                    ),
                ),
                (
                    "es_cuenta_resultado",
                    models.BooleanField(
                        default=False,
                        help_text="Si es cuenta de resultado (ingresos/gastos)",
                        verbose_name="Es Cuenta de Resultado",
                    ),
                ),
                (
                    "se_ajusta_inflacion",
                    models.BooleanField(
                        default=False,
                        help_text="Si se ajusta por inflación",
                        verbose_name="Se Ajusta por Inflación",
                    ),
                ),
                (
                    "uso_automatico",
                    models.BooleanField(
                        default=False,
                        help_text="Si se usa automáticamente en procesos",
                        verbose_name="Uso Automático",
                    ),
                ),
                (
                    "cuenta_ventas",
                    models.BooleanField(
                        default=False,
                        help_text="Si es cuenta de ventas",
                        verbose_name="Cuenta de Ventas",
                    ),
                ),
                (
                    "cuenta_compras",
                    models.BooleanField(
                        default=False,
                        help_text="Si es cuenta de compras",
                        verbose_name="Cuenta de Compras",
                    ),
                ),
                (
                    "cuenta_inventario",
                    models.BooleanField(
                        default=False,
                        help_text="Si es cuenta de inventario",
                        verbose_name="Cuenta de Inventario",
                    ),
                ),
                (
                    "cuenta_igv",
                    models.BooleanField(
                        default=False,
                        help_text="Si es cuenta de IGV",
                        verbose_name="Cuenta de IGV",
                    ),
                ),
                (
                    "cuenta_cuentas_cobrar",
                    models.BooleanField(
                        default=False,
                        help_text="Si es cuenta por cobrar",
                        verbose_name="Cuenta por Cobrar",
                    ),
                ),
                (
                    "cuenta_cuentas_pagar",
                    models.BooleanField(
                        default=False,
                        help_text="Si es cuenta por pagar",
                        verbose_name="Cuenta por Pagar",
                    ),
                ),
                (
                    "saldo_inicial",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Saldo inicial del ejercicio",
                        max_digits=15,
                        verbose_name="Saldo Inicial",
                    ),
                ),
                (
                    "saldo_debe",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Total movimientos al debe",
                        max_digits=15,
                        verbose_name="Saldo Debe",
                    ),
                ),
                (
                    "saldo_haber",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Total movimientos al haber",
                        max_digits=15,
                        verbose_name="Saldo Haber",
                    ),
                ),
                (
                    "saldo_actual",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Saldo actual de la cuenta",
                        max_digits=15,
                        verbose_name="Saldo Actual",
                    ),
                ),
                (
                    "cuenta_padre",
                    models.ForeignKey(
                        blank=True,
                        help_text="Cuenta padre en la jerarquía",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="cuentas_hijas",
                        to="contabilidad.plancuentas",
                        verbose_name="Cuenta Padre",
                    ),
                ),
            ],
            options={
                "verbose_name": "Plan de Cuentas",
                "verbose_name_plural": "Plan de Cuentas",
                "db_table": "contabilidad_plan_cuentas",
                "ordering": ["codigo"],
            },
        ),
        migrations.CreateModel(
            name="EjercicioContable",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "fecha_creacion",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Fecha y hora de creación del registro",
                        verbose_name="Fecha de Creación",
                    ),
                ),
                (
                    "fecha_actualizacion",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Fecha y hora de última actualización",
                        verbose_name="Fecha de Actualización",
                    ),
                ),
                (
                    "activo",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Indica si el registro está activo",
                        verbose_name="Activo",
                    ),
                ),
                (
                    "codigo",
                    models.CharField(
                        help_text="Código del ejercicio (ej: 2024)",
                        max_length=10,
                        unique=True,
                        verbose_name="Código",
                    ),
                ),
                (
                    "nombre",
                    models.CharField(
                        help_text="Nombre del ejercicio contable",
                        max_length=100,
                        verbose_name="Nombre",
                    ),
                ),
                (
                    "fecha_inicio",
                    models.DateField(
                        help_text="Fecha de inicio del ejercicio",
                        verbose_name="Fecha de Inicio",
                    ),
                ),
                (
                    "fecha_fin",
                    models.DateField(
                        help_text="Fecha de fin del ejercicio",
                        verbose_name="Fecha de Fin",
                    ),
                ),
                (
                    "estado",
                    models.CharField(
                        choices=[
                            ("abierto", "Abierto"),
                            ("cerrado", "Cerrado"),
                            ("auditado", "Auditado"),
                        ],
                        db_index=True,
                        default="abierto",
                        help_text="Estado del ejercicio",
                        max_length=10,
                        verbose_name="Estado",
                    ),
                ),
                (
                    "es_actual",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Si es el ejercicio actual",
                        verbose_name="Es Actual",
                    ),
                ),
                (
                    "fecha_cierre",
                    models.DateTimeField(
                        blank=True,
                        help_text="Fecha de cierre del ejercicio",
                        null=True,
                        verbose_name="Fecha de Cierre",
                    ),
                ),
                (
                    "observaciones",
                    models.TextField(
                        blank=True,
                        help_text="Observaciones del ejercicio",
                        null=True,
                        verbose_name="Observaciones",
                    ),
                ),
                (
                    "usuario_cierre",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="ejercicios_cerrados",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Usuario Cierre",
                    ),
                ),
            ],
            options={
                "verbose_name": "Ejercicio Contable",
                "verbose_name_plural": "Ejercicios Contables",
                "db_table": "contabilidad_ejercicio_contable",
                "ordering": ["-fecha_inicio"],
            },
        ),
        migrations.CreateModel(
            name="DetalleAsiento",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "fecha_creacion",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Fecha y hora de creación del registro",
                        verbose_name="Fecha de Creación",
                    ),
                ),
                (
                    "fecha_actualizacion",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Fecha y hora de última actualización",
                        verbose_name="Fecha de Actualización",
                    ),
                ),
                (
                    "activo",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Indica si el registro está activo",
                        verbose_name="Activo",
                    ),
                ),
                (
                    "numero_linea",
                    models.PositiveIntegerField(
                        help_text="Número de línea dentro del asiento",
                        verbose_name="Número de Línea",
                    ),
                ),
                (
                    "glosa",
                    models.TextField(
                        help_text="Descripción del movimiento",
                        max_length=300,
                        verbose_name="Glosa",
                    ),
                ),
                (
                    "debe",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Importe del debe",
                        max_digits=15,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="Debe",
                    ),
                ),
                (
                    "haber",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Importe del haber",
                        max_digits=15,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="Haber",
                    ),
                ),
                (
                    "debe_me",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Importe debe en moneda extranjera",
                        max_digits=15,
                        verbose_name="Debe ME",
                    ),
                ),
                (
                    "haber_me",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Importe haber en moneda extranjera",
                        max_digits=15,
                        verbose_name="Haber ME",
                    ),
                ),
                (
                    "documento_referencia",
                    models.CharField(
                        blank=True,
                        help_text="Documento de referencia",
                        max_length=50,
                        null=True,
                        verbose_name="Documento Referencia",
                    ),
                ),
                (
                    "fecha_vencimiento",
                    models.DateField(
                        blank=True,
                        help_text="Fecha de vencimiento (para cuentas por cobrar/pagar)",
                        null=True,
                        verbose_name="Fecha Vencimiento",
                    ),
                ),
                (
                    "centro_costo",
                    models.CharField(
                        blank=True,
                        help_text="Centro de costo específico",
                        max_length=20,
                        null=True,
                        verbose_name="Centro de Costo",
                    ),
                ),
                (
                    "proyecto",
                    models.CharField(
                        blank=True,
                        help_text="Proyecto específico",
                        max_length=50,
                        null=True,
                        verbose_name="Proyecto",
                    ),
                ),
                (
                    "tipo_documento_tercero",
                    models.CharField(
                        blank=True,
                        help_text="Tipo de documento del tercero",
                        max_length=2,
                        null=True,
                        verbose_name="Tipo Doc. Tercero",
                    ),
                ),
                (
                    "numero_documento_tercero",
                    models.CharField(
                        blank=True,
                        help_text="Número de documento del tercero",
                        max_length=15,
                        null=True,
                        verbose_name="Núm. Doc. Tercero",
                    ),
                ),
                (
                    "observaciones",
                    models.TextField(
                        blank=True,
                        help_text="Observaciones del detalle",
                        null=True,
                        verbose_name="Observaciones",
                    ),
                ),
                (
                    "asiento",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="detalles",
                        to="contabilidad.asientocontable",
                        verbose_name="Asiento Contable",
                    ),
                ),
                (
                    "cliente_proveedor",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="movimientos_contables",
                        to="clientes.cliente",
                        verbose_name="Cliente/Proveedor",
                    ),
                ),
                (
                    "cuenta",
                    models.ForeignKey(
                        limit_choices_to={"acepta_movimientos": True},
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="movimientos",
                        to="contabilidad.plancuentas",
                        verbose_name="Cuenta Contable",
                    ),
                ),
            ],
            options={
                "verbose_name": "Detalle de Asiento",
                "verbose_name_plural": "Detalles de Asientos",
                "db_table": "contabilidad_detalle_asiento",
                "ordering": ["numero_linea"],
            },
        ),
        migrations.CreateModel(
            name="ConfiguracionContable",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "fecha_creacion",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Fecha y hora de creación del registro",
                        verbose_name="Fecha de Creación",
                    ),
                ),
                (
                    "fecha_actualizacion",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Fecha y hora de última actualización",
                        verbose_name="Fecha de Actualización",
                    ),
                ),
                (
                    "activo",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Indica si el registro está activo",
                        verbose_name="Activo",
                    ),
                ),
                (
                    "generar_asientos_venta",
                    models.BooleanField(
                        default=True,
                        help_text="Si generar asientos automáticos por ventas",
                        verbose_name="Generar Asientos Venta",
                    ),
                ),
                (
                    "generar_asientos_inventario",
                    models.BooleanField(
                        default=True,
                        help_text="Si generar asientos por movimientos de inventario",
                        verbose_name="Generar Asientos Inventario",
                    ),
                ),
                (
                    "usar_centro_costos",
                    models.BooleanField(
                        default=False,
                        help_text="Si usar centros de costo",
                        verbose_name="Usar Centros de Costo",
                    ),
                ),
                (
                    "usar_proyectos",
                    models.BooleanField(
                        default=False,
                        help_text="Si usar control de proyectos",
                        verbose_name="Usar Proyectos",
                    ),
                ),
                (
                    "cerrar_automatico_mes",
                    models.BooleanField(
                        default=False,
                        help_text="Si cerrar automáticamente cada mes",
                        verbose_name="Cierre Automático Mes",
                    ),
                ),
                (
                    "cuenta_banco_principal",
                    models.ForeignKey(
                        blank=True,
                        help_text="Cuenta del banco principal",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="contabilidad.plancuentas",
                        verbose_name="Banco Principal",
                    ),
                ),
                (
                    "cuenta_caja",
                    models.ForeignKey(
                        help_text="Cuenta principal de caja",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="contabilidad.plancuentas",
                        verbose_name="Cuenta Caja",
                    ),
                ),
                (
                    "cuenta_costo_ventas",
                    models.ForeignKey(
                        help_text="Cuenta para costo de ventas",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="contabilidad.plancuentas",
                        verbose_name="Costo de Ventas",
                    ),
                ),
                (
                    "cuenta_cuentas_cobrar_boletas",
                    models.ForeignKey(
                        help_text="Cuenta para cuentas por cobrar - boletas",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="contabilidad.plancuentas",
                        verbose_name="Cuentas por Cobrar Boletas",
                    ),
                ),
                (
                    "cuenta_cuentas_cobrar_facturas",
                    models.ForeignKey(
                        help_text="Cuenta para cuentas por cobrar - facturas",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="contabilidad.plancuentas",
                        verbose_name="Cuentas por Cobrar Facturas",
                    ),
                ),
                (
                    "cuenta_igv_compras",
                    models.ForeignKey(
                        help_text="Cuenta para IGV de compras",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="contabilidad.plancuentas",
                        verbose_name="Cuenta IGV Compras",
                    ),
                ),
                (
                    "cuenta_igv_ventas",
                    models.ForeignKey(
                        help_text="Cuenta para IGV de ventas",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="contabilidad.plancuentas",
                        verbose_name="Cuenta IGV Ventas",
                    ),
                ),
                (
                    "cuenta_inventario_mercaderias",
                    models.ForeignKey(
                        help_text="Cuenta para inventario de mercaderías",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="contabilidad.plancuentas",
                        verbose_name="Inventario Mercaderías",
                    ),
                ),
                (
                    "cuenta_ventas_exoneradas",
                    models.ForeignKey(
                        blank=True,
                        help_text="Cuenta para ventas exoneradas de IGV",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="contabilidad.plancuentas",
                        verbose_name="Cuenta Ventas Exoneradas",
                    ),
                ),
                (
                    "cuenta_ventas_gravadas",
                    models.ForeignKey(
                        help_text="Cuenta para ventas gravadas con IGV",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="contabilidad.plancuentas",
                        verbose_name="Cuenta Ventas Gravadas",
                    ),
                ),
                (
                    "cuenta_ventas_inafectas",
                    models.ForeignKey(
                        blank=True,
                        help_text="Cuenta para ventas inafectas de IGV",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="contabilidad.plancuentas",
                        verbose_name="Cuenta Ventas Inafectas",
                    ),
                ),
            ],
            options={
                "verbose_name": "Configuración Contable",
                "verbose_name_plural": "Configuraciones Contables",
                "db_table": "contabilidad_configuracion_contable",
            },
        ),
        migrations.AddField(
            model_name="asientocontable",
            name="ejercicio",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="asientos",
                to="contabilidad.ejerciciocontable",
                verbose_name="Ejercicio Contable",
            ),
        ),
        migrations.AddField(
            model_name="asientocontable",
            name="usuario_aprobacion",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="asientos_aprobados",
                to=settings.AUTH_USER_MODEL,
                verbose_name="Usuario Aprobación",
            ),
        ),
        migrations.AddField(
            model_name="asientocontable",
            name="usuario_creacion",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="asientos_creados",
                to=settings.AUTH_USER_MODEL,
                verbose_name="Usuario Creación",
            ),
        ),
        migrations.AddIndex(
            model_name="plancuentas",
            index=models.Index(fields=["codigo"], name="idx_plan_codigo"),
        ),
        migrations.AddIndex(
            model_name="plancuentas",
            index=models.Index(fields=["elemento_pcge"], name="idx_plan_elemento"),
        ),
        migrations.AddIndex(
            model_name="plancuentas",
            index=models.Index(fields=["tipo_cuenta"], name="idx_plan_tipo"),
        ),
        migrations.AddIndex(
            model_name="plancuentas",
            index=models.Index(fields=["naturaleza"], name="idx_plan_naturaleza"),
        ),
        migrations.AddIndex(
            model_name="plancuentas",
            index=models.Index(fields=["cuenta_padre"], name="idx_plan_padre"),
        ),
        migrations.AddIndex(
            model_name="plancuentas",
            index=models.Index(
                fields=["acepta_movimientos"], name="idx_plan_movimientos"
            ),
        ),
        migrations.AddIndex(
            model_name="plancuentas",
            index=models.Index(fields=["uso_automatico"], name="idx_plan_automatico"),
        ),
        migrations.AddIndex(
            model_name="plancuentas",
            index=models.Index(fields=["activo"], name="idx_plan_activo"),
        ),
        migrations.AddIndex(
            model_name="ejerciciocontable",
            index=models.Index(fields=["codigo"], name="idx_ejercicio_codigo"),
        ),
        migrations.AddIndex(
            model_name="ejerciciocontable",
            index=models.Index(fields=["fecha_inicio"], name="idx_ejercicio_inicio"),
        ),
        migrations.AddIndex(
            model_name="ejerciciocontable",
            index=models.Index(fields=["fecha_fin"], name="idx_ejercicio_fin"),
        ),
        migrations.AddIndex(
            model_name="ejerciciocontable",
            index=models.Index(fields=["estado"], name="idx_ejercicio_estado"),
        ),
        migrations.AddIndex(
            model_name="ejerciciocontable",
            index=models.Index(fields=["es_actual"], name="idx_ejercicio_actual"),
        ),
        migrations.AddIndex(
            model_name="ejerciciocontable",
            index=models.Index(fields=["activo"], name="idx_ejercicio_activo"),
        ),
        migrations.AddIndex(
            model_name="detalleasiento",
            index=models.Index(fields=["asiento"], name="idx_detal_asient_contable"),
        ),
        migrations.AddIndex(
            model_name="detalleasiento",
            index=models.Index(fields=["cuenta"], name="idx_detal_asient_cuenta"),
        ),
        migrations.AddIndex(
            model_name="detalleasiento",
            index=models.Index(fields=["numero_linea"], name="idx_detal_asien_linea"),
        ),
        migrations.AddIndex(
            model_name="detalleasiento",
            index=models.Index(fields=["debe"], name="idx_detal_debe"),
        ),
        migrations.AddIndex(
            model_name="detalleasiento",
            index=models.Index(fields=["haber"], name="idx_detal_haber"),
        ),
        migrations.AddIndex(
            model_name="detalleasiento",
            index=models.Index(fields=["cliente_proveedor"], name="idx_detal_tercero"),
        ),
        migrations.AddIndex(
            model_name="detalleasiento",
            index=models.Index(
                fields=["activo"], name="idx_detal_asient_contab_activo"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="detalleasiento",
            unique_together={("asiento", "numero_linea")},
        ),
        migrations.AddIndex(
            model_name="asientocontable",
            index=models.Index(fields=["numero"], name="idx_asiento_numero"),
        ),
        migrations.AddIndex(
            model_name="asientocontable",
            index=models.Index(fields=["fecha"], name="idx_asiento_fecha"),
        ),
        migrations.AddIndex(
            model_name="asientocontable",
            index=models.Index(fields=["tipo_asiento"], name="idx_asiento_tipo"),
        ),
        migrations.AddIndex(
            model_name="asientocontable",
            index=models.Index(fields=["estado"], name="idx_asiento_estado"),
        ),
        migrations.AddIndex(
            model_name="asientocontable",
            index=models.Index(fields=["ejercicio"], name="idx_asiento_ejercicio"),
        ),
        migrations.AddIndex(
            model_name="asientocontable",
            index=models.Index(fields=["usuario_creacion"], name="idx_asiento_usuario"),
        ),
        migrations.AddIndex(
            model_name="asientocontable",
            index=models.Index(
                fields=["documento_electronico"], name="idx_asiento_documento"
            ),
        ),
        migrations.AddIndex(
            model_name="asientocontable",
            index=models.Index(fields=["es_automatico"], name="idx_asiento_automatico"),
        ),
        migrations.AddIndex(
            model_name="asientocontable",
            index=models.Index(fields=["activo"], name="idx_asiento_activo"),
        ),
        migrations.AlterUniqueTogether(
            name="asientocontable",
            unique_together={("ejercicio", "numero")},
        ),
    ]
