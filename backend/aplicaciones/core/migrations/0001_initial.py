# Generated by Django 4.2.23 on 2025-06-22 22:30

from decimal import Decimal
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="ConfiguracionSistema",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "fecha_creacion",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Fecha y hora de creación del registro",
                        verbose_name="Fecha de Creación",
                    ),
                ),
                (
                    "fecha_actualizacion",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Fecha y hora de última actualización",
                        verbose_name="Fecha de Actualización",
                    ),
                ),
                (
                    "activo",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Indica si el registro está activo",
                        verbose_name="Activo",
                    ),
                ),
                (
                    "clave",
                    models.CharField(
                        db_index=True,
                        help_text="Clave de configuración",
                        max_length=100,
                        unique=True,
                        verbose_name="Clave",
                    ),
                ),
                (
                    "valor",
                    models.TextField(
                        help_text="Valor de la configuración", verbose_name="Valor"
                    ),
                ),
                (
                    "descripcion",
                    models.TextField(
                        blank=True,
                        help_text="Descripción de la configuración",
                        null=True,
                        verbose_name="Descripción",
                    ),
                ),
                (
                    "tipo_dato",
                    models.CharField(
                        choices=[
                            ("string", "Texto"),
                            ("integer", "Entero"),
                            ("decimal", "Decimal"),
                            ("boolean", "Booleano"),
                            ("json", "JSON"),
                        ],
                        default="string",
                        help_text="Tipo de dato del valor",
                        max_length=20,
                        verbose_name="Tipo de Dato",
                    ),
                ),
            ],
            options={
                "verbose_name": "Configuración del Sistema",
                "verbose_name_plural": "Configuraciones del Sistema",
                "db_table": "core_configuracion_sistema",
            },
        ),
        migrations.CreateModel(
            name="Empresa",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "fecha_creacion",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Fecha y hora de creación del registro",
                        verbose_name="Fecha de Creación",
                    ),
                ),
                (
                    "fecha_actualizacion",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Fecha y hora de última actualización",
                        verbose_name="Fecha de Actualización",
                    ),
                ),
                (
                    "activo",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Indica si el registro está activo",
                        verbose_name="Activo",
                    ),
                ),
                (
                    "ruc",
                    models.CharField(
                        db_index=True,
                        help_text="RUC de la empresa (11 dígitos)",
                        max_length=11,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="El RUC debe tener exactamente 11 dígitos",
                                regex="^\\d{11}$",
                            )
                        ],
                        verbose_name="RUC",
                    ),
                ),
                (
                    "razon_social",
                    models.CharField(
                        help_text="Razón social completa de la empresa",
                        max_length=200,
                        validators=[django.core.validators.MinLengthValidator(5)],
                        verbose_name="Razón Social",
                    ),
                ),
                (
                    "nombre_comercial",
                    models.CharField(
                        blank=True,
                        help_text="Nombre comercial de la empresa",
                        max_length=150,
                        null=True,
                        verbose_name="Nombre Comercial",
                    ),
                ),
                (
                    "direccion",
                    models.TextField(
                        help_text="Dirección fiscal completa",
                        max_length=500,
                        verbose_name="Dirección Fiscal",
                    ),
                ),
                (
                    "ubigeo",
                    models.CharField(
                        help_text="Código de ubigeo (6 dígitos)",
                        max_length=6,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="El ubigeo debe tener exactamente 6 dígitos",
                                regex="^\\d{6}$",
                            )
                        ],
                        verbose_name="Ubigeo",
                    ),
                ),
                (
                    "departamento",
                    models.CharField(
                        help_text="Departamento según ubigeo",
                        max_length=50,
                        verbose_name="Departamento",
                    ),
                ),
                (
                    "provincia",
                    models.CharField(
                        help_text="Provincia según ubigeo",
                        max_length=50,
                        verbose_name="Provincia",
                    ),
                ),
                (
                    "distrito",
                    models.CharField(
                        help_text="Distrito según ubigeo",
                        max_length=50,
                        verbose_name="Distrito",
                    ),
                ),
                (
                    "telefono",
                    models.CharField(
                        blank=True,
                        help_text="Teléfono principal",
                        max_length=20,
                        null=True,
                        verbose_name="Teléfono",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        help_text="Email principal de la empresa",
                        max_length=254,
                        null=True,
                        verbose_name="Email",
                    ),
                ),
                (
                    "web",
                    models.URLField(
                        blank=True,
                        help_text="Página web de la empresa",
                        null=True,
                        verbose_name="Sitio Web",
                    ),
                ),
                (
                    "usuario_sol",
                    models.CharField(
                        blank=True,
                        help_text="Usuario SOL para SUNAT",
                        max_length=50,
                        null=True,
                        verbose_name="Usuario SOL",
                    ),
                ),
                (
                    "clave_sol",
                    models.CharField(
                        blank=True,
                        help_text="Clave SOL encriptada",
                        max_length=100,
                        null=True,
                        verbose_name="Clave SOL",
                    ),
                ),
                (
                    "certificado_digital",
                    models.FileField(
                        blank=True,
                        help_text="Certificado digital .pfx",
                        null=True,
                        upload_to="certificados/",
                        verbose_name="Certificado Digital",
                    ),
                ),
                (
                    "clave_certificado",
                    models.CharField(
                        blank=True,
                        help_text="Clave del certificado digital",
                        max_length=100,
                        null=True,
                        verbose_name="Clave Certificado",
                    ),
                ),
                (
                    "logo",
                    models.ImageField(
                        blank=True,
                        help_text="Logo para facturas",
                        null=True,
                        upload_to="logos/",
                        verbose_name="Logo",
                    ),
                ),
                (
                    "pie_pagina",
                    models.TextField(
                        blank=True,
                        help_text="Texto del pie de página en facturas",
                        max_length=500,
                        null=True,
                        verbose_name="Pie de Página",
                    ),
                ),
                (
                    "moneda_defecto",
                    models.CharField(
                        choices=[
                            ("PEN", "Soles Peruanos"),
                            ("USD", "Dólares Americanos"),
                            ("EUR", "Euros"),
                        ],
                        default="PEN",
                        help_text="Moneda por defecto para facturación",
                        max_length=3,
                        verbose_name="Moneda por Defecto",
                    ),
                ),
                (
                    "igv_tasa",
                    models.DecimalField(
                        decimal_places=4,
                        default=Decimal("0.1800"),
                        help_text="Tasa de IGV vigente (18%)",
                        max_digits=5,
                        verbose_name="Tasa IGV",
                    ),
                ),
            ],
            options={
                "verbose_name": "Empresa",
                "verbose_name_plural": "Empresas",
                "db_table": "core_empresa",
            },
        ),
        migrations.CreateModel(
            name="Sucursal",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "fecha_creacion",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Fecha y hora de creación del registro",
                        verbose_name="Fecha de Creación",
                    ),
                ),
                (
                    "fecha_actualizacion",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Fecha y hora de última actualización",
                        verbose_name="Fecha de Actualización",
                    ),
                ),
                (
                    "activo",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Indica si el registro está activo",
                        verbose_name="Activo",
                    ),
                ),
                (
                    "codigo",
                    models.CharField(
                        db_index=True,
                        help_text="Código único de la sucursal",
                        max_length=10,
                        verbose_name="Código",
                    ),
                ),
                (
                    "nombre",
                    models.CharField(
                        help_text="Nombre de la sucursal",
                        max_length=100,
                        verbose_name="Nombre",
                    ),
                ),
                (
                    "direccion",
                    models.TextField(
                        help_text="Dirección de la sucursal",
                        max_length=300,
                        verbose_name="Dirección",
                    ),
                ),
                (
                    "telefono",
                    models.CharField(
                        blank=True,
                        help_text="Teléfono de la sucursal",
                        max_length=20,
                        null=True,
                        verbose_name="Teléfono",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        help_text="Email de la sucursal",
                        max_length=254,
                        null=True,
                        verbose_name="Email",
                    ),
                ),
                (
                    "es_principal",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Indica si es la sucursal principal",
                        verbose_name="Es Principal",
                    ),
                ),
                (
                    "serie_factura",
                    models.CharField(
                        default="F001",
                        help_text="Serie para facturas (ej: F001)",
                        max_length=4,
                        verbose_name="Serie Factura",
                    ),
                ),
                (
                    "serie_boleta",
                    models.CharField(
                        default="B001",
                        help_text="Serie para boletas (ej: B001)",
                        max_length=4,
                        verbose_name="Serie Boleta",
                    ),
                ),
                (
                    "serie_nota_credito",
                    models.CharField(
                        default="FC01",
                        help_text="Serie para notas de crédito (ej: FC01)",
                        max_length=4,
                        verbose_name="Serie Nota Crédito",
                    ),
                ),
                (
                    "serie_nota_debito",
                    models.CharField(
                        default="FD01",
                        help_text="Serie para notas de débito (ej: FD01)",
                        max_length=4,
                        verbose_name="Serie Nota Débito",
                    ),
                ),
                (
                    "contador_factura",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Último número de factura emitida",
                        verbose_name="Contador Factura",
                    ),
                ),
                (
                    "contador_boleta",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Último número de boleta emitida",
                        verbose_name="Contador Boleta",
                    ),
                ),
                (
                    "contador_nota_credito",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Último número de nota crédito emitida",
                        verbose_name="Contador Nota Crédito",
                    ),
                ),
                (
                    "contador_nota_debito",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Último número de nota débito emitida",
                        verbose_name="Contador Nota Débito",
                    ),
                ),
                (
                    "empresa",
                    models.ForeignKey(
                        help_text="Empresa a la que pertenece la sucursal",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sucursales",
                        to="core.empresa",
                        verbose_name="Empresa",
                    ),
                ),
            ],
            options={
                "verbose_name": "Sucursal",
                "verbose_name_plural": "Sucursales",
                "db_table": "core_sucursal",
            },
        ),
        migrations.AddIndex(
            model_name="empresa",
            index=models.Index(fields=["ruc"], name="idx_empresa_ruc"),
        ),
        migrations.AddIndex(
            model_name="empresa",
            index=models.Index(fields=["activo"], name="idx_empresa_activo"),
        ),
        migrations.AddIndex(
            model_name="empresa",
            index=models.Index(fields=["fecha_creacion"], name="idx_empresa_fecha"),
        ),
        migrations.AddIndex(
            model_name="configuracionsistema",
            index=models.Index(fields=["clave"], name="idx_config_clave"),
        ),
        migrations.AddIndex(
            model_name="configuracionsistema",
            index=models.Index(fields=["activo"], name="idx_config_activo"),
        ),
        migrations.AddIndex(
            model_name="sucursal",
            index=models.Index(
                fields=["empresa", "codigo"], name="idx_sucursal_empresa_codigo"
            ),
        ),
        migrations.AddIndex(
            model_name="sucursal",
            index=models.Index(fields=["es_principal"], name="idx_sucursal_principal"),
        ),
        migrations.AddIndex(
            model_name="sucursal",
            index=models.Index(fields=["activo"], name="idx_sucursal_activo"),
        ),
        migrations.AlterUniqueTogether(
            name="sucursal",
            unique_together={
                ("empresa", "serie_boleta"),
                ("empresa", "serie_factura"),
                ("empresa", "codigo"),
            },
        ),
    ]
