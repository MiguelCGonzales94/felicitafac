# Generated by Django 4.2.23 on 2025-06-22 22:30

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Usuario",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "fecha_creacion",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Fecha y hora de creación del registro",
                        verbose_name="Fecha de Creación",
                    ),
                ),
                (
                    "fecha_actualizacion",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Fecha y hora de última actualización",
                        verbose_name="Fecha de Actualización",
                    ),
                ),
                (
                    "activo",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Indica si el registro está activo",
                        verbose_name="Activo",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        help_text="Email único para login",
                        max_length=254,
                        unique=True,
                        validators=[django.core.validators.EmailValidator()],
                        verbose_name="Email",
                    ),
                ),
                (
                    "nombres",
                    models.CharField(
                        help_text="Nombres completos del usuario",
                        max_length=100,
                        verbose_name="Nombres",
                    ),
                ),
                (
                    "apellidos",
                    models.CharField(
                        help_text="Apellidos completos del usuario",
                        max_length=100,
                        verbose_name="Apellidos",
                    ),
                ),
                (
                    "tipo_documento",
                    models.CharField(
                        choices=[
                            ("dni", "DNI"),
                            ("ruc", "RUC"),
                            ("carnet_extranjeria", "Carnet de Extranjería"),
                            ("pasaporte", "Pasaporte"),
                        ],
                        default="dni",
                        max_length=20,
                        verbose_name="Tipo de Documento",
                    ),
                ),
                (
                    "numero_documento",
                    models.CharField(
                        max_length=20,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Formato de documento inválido",
                                regex="^[0-9A-Z]{8,20}$",
                            )
                        ],
                        verbose_name="Número de Documento",
                    ),
                ),
                (
                    "telefono",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Formato de teléfono inválido",
                                regex="^\\+?[0-9\\s\\-\\(\\)]{7,20}$",
                            )
                        ],
                        verbose_name="Teléfono",
                    ),
                ),
                (
                    "estado_usuario",
                    models.CharField(
                        choices=[
                            ("activo", "Activo"),
                            ("inactivo", "Inactivo"),
                            ("suspendido", "Suspendido"),
                            ("bloqueado", "Bloqueado"),
                        ],
                        default="activo",
                        max_length=20,
                        verbose_name="Estado del Usuario",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Puede acceder al panel de administración",
                        verbose_name="Es Staff",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Usuario puede hacer login",
                        verbose_name="Usuario Activo",
                    ),
                ),
                (
                    "fecha_ultimo_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Último Login"
                    ),
                ),
                (
                    "intentos_login_fallidos",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Intentos de Login Fallidos"
                    ),
                ),
                (
                    "fecha_bloqueo",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Fecha de Bloqueo"
                    ),
                ),
                (
                    "debe_cambiar_password",
                    models.BooleanField(
                        default=False, verbose_name="Debe Cambiar Contraseña"
                    ),
                ),
                (
                    "fecha_cambio_password",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Última Cambio de Contraseña",
                    ),
                ),
                (
                    "notificaciones_email",
                    models.BooleanField(
                        default=True, verbose_name="Recibir Notificaciones por Email"
                    ),
                ),
                (
                    "notificaciones_sistema",
                    models.BooleanField(
                        default=True, verbose_name="Mostrar Notificaciones en Sistema"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
            ],
            options={
                "verbose_name": "Usuario",
                "verbose_name_plural": "Usuarios",
                "db_table": "usuarios_usuario",
                "ordering": ["nombres", "apellidos"],
            },
        ),
        migrations.CreateModel(
            name="Rol",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "fecha_creacion",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Fecha y hora de creación del registro",
                        verbose_name="Fecha de Creación",
                    ),
                ),
                (
                    "fecha_actualizacion",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Fecha y hora de última actualización",
                        verbose_name="Fecha de Actualización",
                    ),
                ),
                (
                    "activo",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Indica si el registro está activo",
                        verbose_name="Activo",
                    ),
                ),
                (
                    "nombre",
                    models.CharField(
                        help_text="Nombre único del rol en el sistema",
                        max_length=50,
                        unique=True,
                        verbose_name="Nombre del Rol",
                    ),
                ),
                (
                    "codigo",
                    models.CharField(
                        choices=[
                            ("administrador", "Administrador"),
                            ("contador", "Contador"),
                            ("vendedor", "Vendedor"),
                            ("cliente", "Cliente"),
                        ],
                        help_text="Código interno del rol",
                        max_length=20,
                        unique=True,
                        verbose_name="Código del Rol",
                    ),
                ),
                (
                    "descripcion",
                    models.TextField(
                        help_text="Descripción detallada del rol y sus permisos",
                        verbose_name="Descripción",
                    ),
                ),
                (
                    "nivel_acceso",
                    models.PositiveIntegerField(
                        default=1,
                        help_text="Nivel numérico de acceso (mayor número = más permisos)",
                        verbose_name="Nivel de Acceso",
                    ),
                ),
                (
                    "permisos_especiales",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Configuración JSON de permisos específicos",
                        verbose_name="Permisos Especiales",
                    ),
                ),
            ],
            options={
                "verbose_name": "Rol",
                "verbose_name_plural": "Roles",
                "db_table": "usuarios_rol",
                "ordering": ["nivel_acceso", "nombre"],
                "indexes": [
                    models.Index(fields=["codigo"], name="idx_rol_codigo"),
                    models.Index(fields=["nivel_acceso"], name="idx_rol_nivel"),
                ],
            },
        ),
        migrations.CreateModel(
            name="PerfilUsuario",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "fecha_creacion",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Fecha y hora de creación del registro",
                        verbose_name="Fecha de Creación",
                    ),
                ),
                (
                    "fecha_actualizacion",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Fecha y hora de última actualización",
                        verbose_name="Fecha de Actualización",
                    ),
                ),
                (
                    "activo",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Indica si el registro está activo",
                        verbose_name="Activo",
                    ),
                ),
                (
                    "fecha_nacimiento",
                    models.DateField(
                        blank=True, null=True, verbose_name="Fecha de Nacimiento"
                    ),
                ),
                ("direccion", models.TextField(blank=True, verbose_name="Dirección")),
                (
                    "ciudad",
                    models.CharField(blank=True, max_length=100, verbose_name="Ciudad"),
                ),
                (
                    "pais",
                    models.CharField(
                        default="Perú", max_length=50, verbose_name="País"
                    ),
                ),
                (
                    "tema_oscuro",
                    models.BooleanField(default=False, verbose_name="Tema Oscuro"),
                ),
                (
                    "idioma",
                    models.CharField(
                        choices=[("es", "Español"), ("en", "English")],
                        default="es",
                        max_length=10,
                        verbose_name="Idioma",
                    ),
                ),
                (
                    "timezone",
                    models.CharField(
                        default="America/Lima",
                        max_length=50,
                        verbose_name="Zona Horaria",
                    ),
                ),
                (
                    "configuracion_dashboard",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Configuración personalizada del dashboard",
                        verbose_name="Configuración Dashboard",
                    ),
                ),
                (
                    "cargo",
                    models.CharField(blank=True, max_length=100, verbose_name="Cargo"),
                ),
                (
                    "empresa",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="Empresa"
                    ),
                ),
                ("biografia", models.TextField(blank=True, verbose_name="Biografía")),
                (
                    "avatar",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="usuarios/avatars/",
                        verbose_name="Avatar",
                    ),
                ),
                (
                    "usuario",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="perfil",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Usuario",
                    ),
                ),
            ],
            options={
                "verbose_name": "Perfil de Usuario",
                "verbose_name_plural": "Perfiles de Usuario",
                "db_table": "usuarios_perfil",
            },
        ),
        migrations.AddField(
            model_name="usuario",
            name="rol",
            field=models.ForeignKey(
                help_text="Rol asignado que define permisos",
                on_delete=django.db.models.deletion.PROTECT,
                to="usuarios.rol",
                verbose_name="Rol del Usuario",
            ),
        ),
        migrations.AddField(
            model_name="usuario",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="user_set",
                related_query_name="user",
                to="auth.permission",
                verbose_name="user permissions",
            ),
        ),
        migrations.CreateModel(
            name="SesionUsuario",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "fecha_creacion",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Fecha y hora de creación del registro",
                        verbose_name="Fecha de Creación",
                    ),
                ),
                (
                    "fecha_actualizacion",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Fecha y hora de última actualización",
                        verbose_name="Fecha de Actualización",
                    ),
                ),
                (
                    "activo",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Indica si el registro está activo",
                        verbose_name="Activo",
                    ),
                ),
                (
                    "token_sesion",
                    models.CharField(
                        max_length=255, unique=True, verbose_name="Token de Sesión"
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(verbose_name="Dirección IP"),
                ),
                ("user_agent", models.TextField(verbose_name="User Agent")),
                (
                    "fecha_inicio",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Fecha de Inicio"
                    ),
                ),
                (
                    "fecha_ultimo_uso",
                    models.DateTimeField(auto_now=True, verbose_name="Último Uso"),
                ),
                (
                    "activa",
                    models.BooleanField(default=True, verbose_name="Sesión Activa"),
                ),
                (
                    "fecha_expiracion",
                    models.DateTimeField(verbose_name="Fecha de Expiración"),
                ),
                (
                    "usuario",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sesiones",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Usuario",
                    ),
                ),
            ],
            options={
                "verbose_name": "Sesión de Usuario",
                "verbose_name_plural": "Sesiones de Usuario",
                "db_table": "usuarios_sesion",
                "ordering": ["-fecha_ultimo_uso"],
                "indexes": [
                    models.Index(fields=["usuario"], name="idx_sesion_usuario"),
                    models.Index(fields=["token_sesion"], name="idx_sesion_token"),
                    models.Index(fields=["activa"], name="idx_sesion_activa"),
                    models.Index(
                        fields=["fecha_expiracion"], name="idx_sesion_expiracion"
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="usuario",
            index=models.Index(fields=["email"], name="idx_usuario_email"),
        ),
        migrations.AddIndex(
            model_name="usuario",
            index=models.Index(
                fields=["numero_documento"], name="idx_usuario_documento"
            ),
        ),
        migrations.AddIndex(
            model_name="usuario",
            index=models.Index(fields=["estado_usuario"], name="idx_usuario_estado"),
        ),
        migrations.AddIndex(
            model_name="usuario",
            index=models.Index(fields=["rol"], name="idx_usuario_rol"),
        ),
        migrations.AddIndex(
            model_name="usuario",
            index=models.Index(fields=["is_active"], name="idx_usuario_activo"),
        ),
    ]
