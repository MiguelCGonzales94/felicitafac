# Generated by Django 4.2.23 on 2025-06-19 05:00

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("core", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Usuario",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "fecha_creacion",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Fecha y hora de creación del registro",
                        verbose_name="Fecha de Creación",
                    ),
                ),
                (
                    "fecha_actualizacion",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Fecha y hora de última actualización",
                        verbose_name="Fecha de Actualización",
                    ),
                ),
                (
                    "activo",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Indica si el registro está activo",
                        verbose_name="Activo",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        db_index=True,
                        help_text="Email único del usuario (será usado para login)",
                        max_length=254,
                        unique=True,
                        verbose_name="Email",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        help_text="Nombres del usuario",
                        max_length=100,
                        validators=[django.core.validators.MinLengthValidator(2)],
                        verbose_name="Nombres",
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        help_text="Apellidos del usuario",
                        max_length=100,
                        validators=[django.core.validators.MinLengthValidator(2)],
                        verbose_name="Apellidos",
                    ),
                ),
                (
                    "dni",
                    models.CharField(
                        db_index=True,
                        help_text="Documento Nacional de Identidad (8 dígitos)",
                        max_length=8,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="El DNI debe tener exactamente 8 dígitos",
                                regex="^\\d{8}$",
                            )
                        ],
                        verbose_name="DNI",
                    ),
                ),
                (
                    "telefono",
                    models.CharField(
                        blank=True,
                        help_text="Número de teléfono",
                        max_length=15,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Formato de teléfono inválido",
                                regex="^[\\d\\s\\-\\+\\(\\)]{7,15}$",
                            )
                        ],
                        verbose_name="Teléfono",
                    ),
                ),
                (
                    "telefono_emergencia",
                    models.CharField(
                        blank=True,
                        help_text="Teléfono de contacto de emergencia",
                        max_length=15,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Formato de teléfono inválido",
                                regex="^[\\d\\s\\-\\+\\(\\)]{7,15}$",
                            )
                        ],
                        verbose_name="Teléfono de Emergencia",
                    ),
                ),
                (
                    "direccion",
                    models.TextField(
                        blank=True,
                        help_text="Dirección del usuario",
                        max_length=300,
                        null=True,
                        verbose_name="Dirección",
                    ),
                ),
                (
                    "fecha_nacimiento",
                    models.DateField(
                        blank=True,
                        help_text="Fecha de nacimiento",
                        null=True,
                        verbose_name="Fecha de Nacimiento",
                    ),
                ),
                (
                    "cargo",
                    models.CharField(
                        blank=True,
                        help_text="Cargo del usuario en la empresa",
                        max_length=100,
                        null=True,
                        verbose_name="Cargo",
                    ),
                ),
                (
                    "avatar",
                    models.ImageField(
                        blank=True,
                        help_text="Foto de perfil del usuario",
                        null=True,
                        upload_to="avatars/",
                        verbose_name="Avatar",
                    ),
                ),
                (
                    "requiere_cambio_password",
                    models.BooleanField(
                        default=True,
                        help_text="Indica si debe cambiar la contraseña en el próximo login",
                        verbose_name="Requiere Cambio de Password",
                    ),
                ),
                (
                    "intentos_login_fallidos",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Contador de intentos fallidos de login",
                        verbose_name="Intentos de Login Fallidos",
                    ),
                ),
                (
                    "fecha_ultimo_login_fallido",
                    models.DateTimeField(
                        blank=True,
                        help_text="Fecha del último intento fallido de login",
                        null=True,
                        verbose_name="Fecha Último Login Fallido",
                    ),
                ),
                (
                    "cuenta_bloqueada_hasta",
                    models.DateTimeField(
                        blank=True,
                        help_text="Fecha hasta la cual la cuenta está bloqueada",
                        null=True,
                        verbose_name="Cuenta Bloqueada Hasta",
                    ),
                ),
                (
                    "notificar_email",
                    models.BooleanField(
                        default=True,
                        help_text="Recibir notificaciones por email",
                        verbose_name="Notificar por Email",
                    ),
                ),
                (
                    "notificar_facturas",
                    models.BooleanField(
                        default=True,
                        help_text="Recibir notificaciones de facturas emitidas",
                        verbose_name="Notificar Facturas",
                    ),
                ),
                (
                    "notificar_reportes",
                    models.BooleanField(
                        default=False,
                        help_text="Recibir notificaciones de reportes generados",
                        verbose_name="Notificar Reportes",
                    ),
                ),
                (
                    "zona_horaria",
                    models.CharField(
                        default="America/Lima",
                        help_text="Zona horaria del usuario",
                        max_length=50,
                        verbose_name="Zona Horaria",
                    ),
                ),
                (
                    "tema_interfaz",
                    models.CharField(
                        choices=[
                            ("claro", "Claro"),
                            ("oscuro", "Oscuro"),
                            ("auto", "Automático"),
                        ],
                        default="claro",
                        help_text="Tema preferido para la interfaz",
                        max_length=20,
                        verbose_name="Tema de Interfaz",
                    ),
                ),
                (
                    "idioma",
                    models.CharField(
                        choices=[("es", "Español"), ("en", "English")],
                        default="es",
                        help_text="Idioma preferido",
                        max_length=10,
                        verbose_name="Idioma",
                    ),
                ),
                (
                    "ultima_actividad",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        help_text="Fecha y hora de la última actividad del usuario",
                        null=True,
                        verbose_name="Última Actividad",
                    ),
                ),
                (
                    "creado_por",
                    models.ForeignKey(
                        blank=True,
                        help_text="Usuario que creó este registro",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="usuarios_creados",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Creado Por",
                    ),
                ),
                (
                    "empresa",
                    models.ForeignKey(
                        help_text="Empresa a la que pertenece el usuario",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="usuarios",
                        to="core.empresa",
                        verbose_name="Empresa",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
            ],
            options={
                "verbose_name": "Usuario",
                "verbose_name_plural": "Usuarios",
                "db_table": "usuarios_usuario",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="UsuarioSucursal",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "fecha_creacion",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Fecha y hora de creación del registro",
                        verbose_name="Fecha de Creación",
                    ),
                ),
                (
                    "fecha_actualizacion",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Fecha y hora de última actualización",
                        verbose_name="Fecha de Actualización",
                    ),
                ),
                (
                    "activo",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Indica si el registro está activo",
                        verbose_name="Activo",
                    ),
                ),
                (
                    "es_principal",
                    models.BooleanField(
                        default=False,
                        help_text="Indica si es la sucursal principal del usuario",
                        verbose_name="Es Sucursal Principal",
                    ),
                ),
                (
                    "permisos_especiales",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Permisos específicos para esta sucursal",
                        verbose_name="Permisos Especiales",
                    ),
                ),
                (
                    "fecha_asignacion",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Fecha de asignación a la sucursal",
                        verbose_name="Fecha de Asignación",
                    ),
                ),
                (
                    "asignado_por",
                    models.ForeignKey(
                        blank=True,
                        help_text="Usuario que realizó la asignación",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="asignaciones_realizadas",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Asignado Por",
                    ),
                ),
                (
                    "sucursal",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.sucursal",
                        verbose_name="Sucursal",
                    ),
                ),
                (
                    "usuario",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Usuario",
                    ),
                ),
            ],
            options={
                "verbose_name": "Usuario Sucursal",
                "verbose_name_plural": "Usuario Sucursales",
                "db_table": "usuarios_usuario_sucursal",
            },
        ),
        migrations.CreateModel(
            name="SesionUsuario",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "session_key",
                    models.CharField(
                        db_index=True,
                        max_length=40,
                        unique=True,
                        verbose_name="Clave de Sesión",
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        help_text="Dirección IP desde la cual se conectó",
                        verbose_name="Dirección IP",
                    ),
                ),
                (
                    "user_agent",
                    models.TextField(
                        help_text="Información del navegador", verbose_name="User Agent"
                    ),
                ),
                (
                    "fecha_inicio",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Fecha y hora de inicio de sesión",
                        verbose_name="Fecha de Inicio",
                    ),
                ),
                (
                    "fecha_fin",
                    models.DateTimeField(
                        blank=True,
                        help_text="Fecha y hora de cierre de sesión",
                        null=True,
                        verbose_name="Fecha de Fin",
                    ),
                ),
                (
                    "activa",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Indica si la sesión está activa",
                        verbose_name="Activa",
                    ),
                ),
                (
                    "usuario",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sesiones",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Usuario",
                    ),
                ),
            ],
            options={
                "verbose_name": "Sesión de Usuario",
                "verbose_name_plural": "Sesiones de Usuarios",
                "db_table": "usuarios_sesion_usuario",
            },
        ),
        migrations.AddField(
            model_name="usuario",
            name="sucursales",
            field=models.ManyToManyField(
                help_text="Sucursales a las que tiene acceso el usuario",
                related_name="usuarios",
                through="usuarios.UsuarioSucursal",
                to="core.sucursal",
                verbose_name="Sucursales",
            ),
        ),
        migrations.AddField(
            model_name="usuario",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="user_set",
                related_query_name="user",
                to="auth.permission",
                verbose_name="user permissions",
            ),
        ),
        migrations.AddIndex(
            model_name="usuariosucursal",
            index=models.Index(
                fields=["usuario", "sucursal"], name="idx_usuario_sucursal"
            ),
        ),
        migrations.AddIndex(
            model_name="usuariosucursal",
            index=models.Index(
                fields=["es_principal"], name="idx_usuario_sucursal_principal"
            ),
        ),
        migrations.AddIndex(
            model_name="usuariosucursal",
            index=models.Index(fields=["activo"], name="idx_usuario_sucursal_activo"),
        ),
        migrations.AlterUniqueTogether(
            name="usuariosucursal",
            unique_together={("usuario", "sucursal")},
        ),
        migrations.AddIndex(
            model_name="sesionusuario",
            index=models.Index(
                fields=["usuario", "activa"], name="idx_sesion_usuario_activa"
            ),
        ),
        migrations.AddIndex(
            model_name="sesionusuario",
            index=models.Index(fields=["session_key"], name="idx_sesion_key"),
        ),
        migrations.AddIndex(
            model_name="sesionusuario",
            index=models.Index(fields=["fecha_inicio"], name="idx_sesion_inicio"),
        ),
        migrations.AddIndex(
            model_name="usuario",
            index=models.Index(fields=["email"], name="idx_usuario_email"),
        ),
        migrations.AddIndex(
            model_name="usuario",
            index=models.Index(fields=["dni"], name="idx_usuario_dni"),
        ),
        migrations.AddIndex(
            model_name="usuario",
            index=models.Index(fields=["empresa"], name="idx_usuario_empresa"),
        ),
        migrations.AddIndex(
            model_name="usuario",
            index=models.Index(fields=["is_active"], name="idx_usuario_activo"),
        ),
        migrations.AddIndex(
            model_name="usuario",
            index=models.Index(
                fields=["ultima_actividad"], name="idx_usuario_actividad"
            ),
        ),
        migrations.AddIndex(
            model_name="usuario",
            index=models.Index(
                fields=["cuenta_bloqueada_hasta"], name="idx_usuario_bloqueado"
            ),
        ),
    ]
